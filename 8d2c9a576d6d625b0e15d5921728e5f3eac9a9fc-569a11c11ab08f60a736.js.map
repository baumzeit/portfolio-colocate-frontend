{"version":3,"file":"8d2c9a576d6d625b0e15d5921728e5f3eac9a9fc-569a11c11ab08f60a736.js","mappings":"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","sources":["webpack://portfolio-colocate/./node_modules/jotai/esm/utils.js"],"sourcesContent":["import { atom, SECRET_INTERNAL_getScopeContext, useAtom, useSetAtom } from 'jotai';\nexport { useAtomValue, useSetAtom as useUpdateAtom } from 'jotai';\nimport { useContext, useCallback, useMemo } from 'react';\n\nconst RESET = Symbol();\n\nfunction atomWithReset(initialValue) {\n  const anAtom = atom(initialValue, (get, set, update) => {\n    if (update === RESET) {\n      set(anAtom, initialValue);\n    } else {\n      set(\n        anAtom,\n        typeof update === \"function\" ? update(get(anAtom)) : update\n      );\n    }\n  });\n  return anAtom;\n}\n\nconst WRITE_ATOM = \"w\";\nconst RESTORE_ATOMS = \"h\";\n\nfunction useResetAtom(anAtom, scope) {\n  const ScopeContext = SECRET_INTERNAL_getScopeContext(scope);\n  const store = useContext(ScopeContext).s;\n  const setAtom = useCallback(\n    () => store[WRITE_ATOM](anAtom, RESET),\n    [store, anAtom]\n  );\n  return setAtom;\n}\n\nfunction useReducerAtom(anAtom, reducer, scope) {\n  const [state, setState] = useAtom(anAtom, scope);\n  const dispatch = useCallback(\n    (action) => {\n      setState((prev) => reducer(prev, action));\n    },\n    [setState, reducer]\n  );\n  return [state, dispatch];\n}\n\nfunction atomWithReducer(initialValue, reducer) {\n  const anAtom = atom(\n    initialValue,\n    (get, set, action) => set(anAtom, reducer(get(anAtom), action))\n  );\n  return anAtom;\n}\n\nfunction atomFamily(initializeAtom, areEqual) {\n  let shouldRemove = null;\n  const atoms = /* @__PURE__ */ new Map();\n  const createAtom = (param) => {\n    let item;\n    if (areEqual === void 0) {\n      item = atoms.get(param);\n    } else {\n      for (const [key, value] of atoms) {\n        if (areEqual(key, param)) {\n          item = value;\n          break;\n        }\n      }\n    }\n    if (item !== void 0) {\n      if (shouldRemove == null ? void 0 : shouldRemove(item[1], param)) {\n        atoms.delete(param);\n      } else {\n        return item[0];\n      }\n    }\n    const newAtom = initializeAtom(param);\n    atoms.set(param, [newAtom, Date.now()]);\n    return newAtom;\n  };\n  createAtom.remove = (param) => {\n    if (areEqual === void 0) {\n      atoms.delete(param);\n    } else {\n      for (const [key] of atoms) {\n        if (areEqual(key, param)) {\n          atoms.delete(key);\n          break;\n        }\n      }\n    }\n  };\n  createAtom.setShouldRemove = (fn) => {\n    shouldRemove = fn;\n    if (!shouldRemove)\n      return;\n    for (const [key, value] of atoms) {\n      if (shouldRemove(value[1], key)) {\n        atoms.delete(key);\n      }\n    }\n  };\n  return createAtom;\n}\n\nconst getWeakCacheItem = (cache, deps) => {\n  do {\n    const [dep, ...rest] = deps;\n    const entry = cache.get(dep);\n    if (!entry) {\n      return;\n    }\n    if (!rest.length) {\n      return entry[1];\n    }\n    cache = entry[0];\n    deps = rest;\n  } while (deps.length);\n};\nconst setWeakCacheItem = (cache, deps, item) => {\n  do {\n    const [dep, ...rest] = deps;\n    let entry = cache.get(dep);\n    if (!entry) {\n      entry = [ new WeakMap()];\n      cache.set(dep, entry);\n    }\n    if (!rest.length) {\n      entry[1] = item;\n      return;\n    }\n    cache = entry[0];\n    deps = rest;\n  } while (deps.length);\n};\nconst createMemoizeAtom = () => {\n  const cache = /* @__PURE__ */ new WeakMap();\n  const memoizeAtom = (createAtom, deps) => {\n    const cachedAtom = getWeakCacheItem(cache, deps);\n    if (cachedAtom) {\n      return cachedAtom;\n    }\n    const createdAtom = createAtom();\n    setWeakCacheItem(cache, deps, createdAtom);\n    return createdAtom;\n  };\n  return memoizeAtom;\n};\n\nconst memoizeAtom$4 = createMemoizeAtom();\nfunction selectAtom(anAtom, selector, equalityFn = Object.is) {\n  return memoizeAtom$4(() => {\n    const refAtom = atom(() => ({}));\n    const derivedAtom = atom((get) => {\n      const slice = selector(get(anAtom));\n      const ref = get(refAtom);\n      if (\"prev\" in ref && equalityFn(ref.prev, slice)) {\n        return ref.prev;\n      }\n      ref.prev = slice;\n      return slice;\n    });\n    return derivedAtom;\n  }, [anAtom, selector, equalityFn]);\n}\n\nfunction useAtomCallback(callback, scope) {\n  const anAtom = useMemo(\n    () => atom(\n      null,\n      (get, set, [arg, resolve, reject]) => {\n        try {\n          resolve(callback(get, set, arg));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    ),\n    [callback]\n  );\n  const invoke = useSetAtom(anAtom, scope);\n  return useCallback(\n    (arg) => {\n      let isSync = true;\n      let settled = {};\n      const promise = new Promise((resolve, reject) => {\n        invoke([\n          arg,\n          (v) => {\n            if (isSync) {\n              settled = { v };\n            } else {\n              resolve(v);\n            }\n          },\n          (e) => {\n            if (isSync) {\n              settled = { e };\n            } else {\n              reject(e);\n            }\n          }\n        ]);\n      });\n      isSync = false;\n      if (\"e\" in settled) {\n        throw settled.e;\n      }\n      if (\"v\" in settled) {\n        return settled.v;\n      }\n      return promise;\n    },\n    [invoke]\n  );\n}\n\nconst memoizeAtom$3 = createMemoizeAtom();\nconst deepFreeze = (obj) => {\n  if (typeof obj !== \"object\" || obj === null)\n    return;\n  Object.freeze(obj);\n  const propNames = Object.getOwnPropertyNames(obj);\n  for (const name of propNames) {\n    const value = obj[name];\n    deepFreeze(value);\n  }\n  return obj;\n};\nfunction freezeAtom(anAtom) {\n  return memoizeAtom$3(() => {\n    const frozenAtom = atom(\n      (get) => deepFreeze(get(anAtom)),\n      (_get, set, arg) => set(anAtom, arg)\n    );\n    return frozenAtom;\n  }, [anAtom]);\n}\nfunction freezeAtomCreator(createAtom) {\n  return (...params) => {\n    const anAtom = createAtom(...params);\n    const origRead = anAtom.read;\n    anAtom.read = (get) => deepFreeze(origRead(get));\n    return anAtom;\n  };\n}\n\nconst memoizeAtom$2 = createMemoizeAtom();\nconst isWritable = (atom2) => !!atom2.write;\nconst isFunction = (x) => typeof x === \"function\";\nfunction splitAtom(arrAtom, keyExtractor) {\n  return memoizeAtom$2(\n    () => {\n      const mappingCache = /* @__PURE__ */ new WeakMap();\n      const getMapping = (arr, prev) => {\n        let mapping = mappingCache.get(arr);\n        if (mapping) {\n          return mapping;\n        }\n        const prevMapping = prev && mappingCache.get(prev);\n        const atomList = [];\n        const keyList = [];\n        arr.forEach((item, index) => {\n          const key = keyExtractor ? keyExtractor(item) : index;\n          keyList[index] = key;\n          const cachedAtom = prevMapping && prevMapping.atomList[prevMapping.keyList.indexOf(key)];\n          if (cachedAtom) {\n            atomList[index] = cachedAtom;\n            return;\n          }\n          const read2 = (get) => {\n            const ref = get(refAtom);\n            const currArr = get(arrAtom);\n            const mapping2 = getMapping(currArr, ref.prev);\n            const index2 = mapping2.keyList.indexOf(key);\n            if (index2 < 0 || index2 >= currArr.length) {\n              const prevItem = arr[getMapping(arr).keyList.indexOf(key)];\n              if (prevItem) {\n                return prevItem;\n              }\n              throw new Error(\"splitAtom: index out of bounds for read\");\n            }\n            return currArr[index2];\n          };\n          const write2 = (get, set, update) => {\n            const ref = get(refAtom);\n            const arr2 = get(arrAtom);\n            const mapping2 = getMapping(arr2, ref.prev);\n            const index2 = mapping2.keyList.indexOf(key);\n            if (index2 < 0 || index2 >= arr2.length) {\n              throw new Error(\"splitAtom: index out of bounds for write\");\n            }\n            const nextItem = isFunction(update) ? update(arr2[index2]) : update;\n            set(arrAtom, [\n              ...arr2.slice(0, index2),\n              nextItem,\n              ...arr2.slice(index2 + 1)\n            ]);\n          };\n          atomList[index] = isWritable(arrAtom) ? atom(read2, write2) : atom(read2);\n        });\n        if (prevMapping && prevMapping.keyList.length === keyList.length && prevMapping.keyList.every((x, i) => x === keyList[i])) {\n          mapping = prevMapping;\n        } else {\n          mapping = { atomList, keyList };\n        }\n        mappingCache.set(arr, mapping);\n        return mapping;\n      };\n      const refAtom = atom(() => ({}));\n      const read = (get) => {\n        const ref = get(refAtom);\n        const arr = get(arrAtom);\n        const mapping = getMapping(arr, ref.prev);\n        ref.prev = arr;\n        return mapping.atomList;\n      };\n      const write = (get, set, action) => {\n        if (\"read\" in action) {\n          console.warn(\"atomToRemove is deprecated. use action with type\");\n          action = { type: \"remove\", atom: action };\n        }\n        switch (action.type) {\n          case \"remove\": {\n            const index = get(splittedAtom).indexOf(action.atom);\n            if (index >= 0) {\n              const arr = get(arrAtom);\n              set(arrAtom, [\n                ...arr.slice(0, index),\n                ...arr.slice(index + 1)\n              ]);\n            }\n            break;\n          }\n          case \"insert\": {\n            const index = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n            if (index >= 0) {\n              const arr = get(arrAtom);\n              set(arrAtom, [\n                ...arr.slice(0, index),\n                action.value,\n                ...arr.slice(index)\n              ]);\n            }\n            break;\n          }\n          case \"move\": {\n            const index1 = get(splittedAtom).indexOf(action.atom);\n            const index2 = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n            if (index1 >= 0 && index2 >= 0) {\n              const arr = get(arrAtom);\n              if (index1 < index2) {\n                set(arrAtom, [\n                  ...arr.slice(0, index1),\n                  ...arr.slice(index1 + 1, index2),\n                  arr[index1],\n                  ...arr.slice(index2)\n                ]);\n              } else {\n                set(arrAtom, [\n                  ...arr.slice(0, index2),\n                  arr[index1],\n                  ...arr.slice(index2, index1),\n                  ...arr.slice(index1 + 1)\n                ]);\n              }\n            }\n            break;\n          }\n        }\n      };\n      const splittedAtom = isWritable(arrAtom) ? atom(read, write) : atom(read);\n      return splittedAtom;\n    },\n    keyExtractor ? [arrAtom, keyExtractor] : [arrAtom]\n  );\n}\n\nfunction atomWithDefault(getDefault) {\n  const EMPTY = Symbol();\n  const overwrittenAtom = atom(EMPTY);\n  const anAtom = atom(\n    (get) => {\n      const overwritten = get(overwrittenAtom);\n      if (overwritten !== EMPTY) {\n        return overwritten;\n      }\n      return getDefault(get);\n    },\n    (get, set, update) => {\n      if (update === RESET) {\n        return set(overwrittenAtom, EMPTY);\n      }\n      return set(\n        overwrittenAtom,\n        typeof update === \"function\" ? update(get(anAtom)) : update\n      );\n    }\n  );\n  return anAtom;\n}\n\nconst memoizeAtom$1 = createMemoizeAtom();\nconst emptyArrayAtom = atom(() => []);\nfunction waitForAll(atoms) {\n  const createAtom = () => {\n    const unwrappedAtoms = unwrapAtoms(atoms);\n    const derivedAtom = atom((get) => {\n      const promises = [];\n      const values = unwrappedAtoms.map((anAtom, index) => {\n        try {\n          return get(anAtom);\n        } catch (e) {\n          if (e instanceof Promise) {\n            promises[index] = e;\n          } else {\n            throw e;\n          }\n        }\n      });\n      if (promises.length) {\n        throw Promise.all(promises);\n      }\n      return wrapResults(atoms, values);\n    });\n    return derivedAtom;\n  };\n  if (Array.isArray(atoms)) {\n    if (atoms.length) {\n      return memoizeAtom$1(createAtom, atoms);\n    }\n    return emptyArrayAtom;\n  }\n  return createAtom();\n}\nconst unwrapAtoms = (atoms) => Array.isArray(atoms) ? atoms : Object.getOwnPropertyNames(atoms).map((key) => atoms[key]);\nconst wrapResults = (atoms, results) => Array.isArray(atoms) ? results : Object.getOwnPropertyNames(atoms).reduce(\n  (out, key, idx) => ({ ...out, [key]: results[idx] }),\n  {}\n);\n\nfunction createJSONStorage(getStringStorage) {\n  let lastStr;\n  let lastValue;\n  return {\n    getItem: (key) => {\n      const parse = (str2) => {\n        str2 = str2 || \"\";\n        if (lastStr !== str2) {\n          lastValue = JSON.parse(str2);\n          lastStr = str2;\n        }\n        return lastValue;\n      };\n      const str = getStringStorage().getItem(key);\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (key, newValue) => getStringStorage().setItem(key, JSON.stringify(newValue)),\n    removeItem: (key) => getStringStorage().removeItem(key)\n  };\n}\nconst defaultStorage = createJSONStorage(() => localStorage);\ndefaultStorage.subscribe = (key, callback) => {\n  const storageEventCallback = (e) => {\n    if (e.key === key && e.newValue) {\n      callback(JSON.parse(e.newValue));\n    }\n  };\n  window.addEventListener(\"storage\", storageEventCallback);\n  return () => {\n    window.removeEventListener(\"storage\", storageEventCallback);\n  };\n};\nfunction atomWithStorage(key, initialValue, storage = defaultStorage) {\n  const getInitialValue = () => {\n    try {\n      const value = storage.getItem(key);\n      if (value instanceof Promise) {\n        return value.catch(() => initialValue);\n      }\n      return value;\n    } catch {\n      return initialValue;\n    }\n  };\n  const baseAtom = atom(storage.delayInit ? initialValue : getInitialValue());\n  baseAtom.onMount = (setAtom) => {\n    let unsub;\n    if (storage.subscribe) {\n      unsub = storage.subscribe(key, setAtom);\n      setAtom(getInitialValue());\n    }\n    if (storage.delayInit) {\n      const value = getInitialValue();\n      if (value instanceof Promise) {\n        value.then(setAtom);\n      } else {\n        setAtom(value);\n      }\n    }\n    return unsub;\n  };\n  const anAtom = atom(\n    (get) => get(baseAtom),\n    (get, set, update) => {\n      if (update === RESET) {\n        set(baseAtom, initialValue);\n        return storage.removeItem(key);\n      }\n      const newValue = typeof update === \"function\" ? update(get(baseAtom)) : update;\n      set(baseAtom, newValue);\n      return storage.setItem(key, newValue);\n    }\n  );\n  return anAtom;\n}\nfunction atomWithHash(key, initialValue, options) {\n  const serialize = (options == null ? void 0 : options.serialize) || JSON.stringify;\n  const deserialize = (options == null ? void 0 : options.deserialize) || JSON.parse;\n  const subscribe = (options == null ? void 0 : options.subscribe) || ((callback) => {\n    window.addEventListener(\"hashchange\", callback);\n    return () => {\n      window.removeEventListener(\"hashchange\", callback);\n    };\n  });\n  const hashStorage = {\n    getItem: (key2) => {\n      const searchParams = new URLSearchParams(location.hash.slice(1));\n      const storedValue = searchParams.get(key2);\n      if (storedValue === null) {\n        throw new Error(\"no value stored\");\n      }\n      return deserialize(storedValue);\n    },\n    setItem: (key2, newValue) => {\n      const searchParams = new URLSearchParams(location.hash.slice(1));\n      searchParams.set(key2, serialize(newValue));\n      if (options == null ? void 0 : options.replaceState) {\n        history.replaceState(null, \"\", \"#\" + searchParams.toString());\n      } else {\n        location.hash = searchParams.toString();\n      }\n    },\n    removeItem: (key2) => {\n      const searchParams = new URLSearchParams(location.hash.slice(1));\n      searchParams.delete(key2);\n      if (options == null ? void 0 : options.replaceState) {\n        history.replaceState(null, \"\", \"#\" + searchParams.toString());\n      } else {\n        location.hash = searchParams.toString();\n      }\n    },\n    ...(options == null ? void 0 : options.delayInit) && { delayInit: true },\n    subscribe: (key2, setValue) => {\n      const callback = () => {\n        const searchParams = new URLSearchParams(location.hash.slice(1));\n        const str = searchParams.get(key2);\n        if (str !== null) {\n          setValue(deserialize(str));\n        } else {\n          setValue(initialValue);\n        }\n      };\n      return subscribe(callback);\n    }\n  };\n  return atomWithStorage(key, initialValue, hashStorage);\n}\n\nfunction atomWithObservable(createObservable, options) {\n  const observableResultAtom = atom((get) => {\n    var _a;\n    let observable = createObservable(get);\n    const itself = (_a = observable[Symbol.observable]) == null ? void 0 : _a.call(observable);\n    if (itself) {\n      observable = itself;\n    }\n    const EMPTY = Symbol();\n    let resolveEmittedInitialValue = null;\n    let initialEmittedValue = (options == null ? void 0 : options.initialValue) === void 0 ? new Promise((resolve) => {\n      resolveEmittedInitialValue = resolve;\n    }) : void 0;\n    let initialValueWasEmitted = false;\n    let emittedValueBeforeMount = EMPTY;\n    let isSync = true;\n    let setData = (data) => {\n      if ((options == null ? void 0 : options.initialValue) === void 0 && !initialValueWasEmitted) {\n        if (isSync) {\n          initialEmittedValue = data;\n        }\n        resolveEmittedInitialValue == null ? void 0 : resolveEmittedInitialValue(data);\n        initialValueWasEmitted = true;\n        resolveEmittedInitialValue = null;\n      } else {\n        emittedValueBeforeMount = data;\n      }\n    };\n    const dataListener = (data) => {\n      setData(data);\n    };\n    const errorListener = (error) => {\n      setData(Promise.reject(error));\n    };\n    let subscription = null;\n    let initialValue;\n    if ((options == null ? void 0 : options.initialValue) !== void 0) {\n      initialValue = getInitialValue(options);\n    } else {\n      subscription = observable.subscribe(dataListener, errorListener);\n      initialValue = initialEmittedValue;\n    }\n    isSync = false;\n    const dataAtom = atom(initialValue);\n    dataAtom.onMount = (update) => {\n      setData = update;\n      if (emittedValueBeforeMount !== EMPTY) {\n        update(emittedValueBeforeMount);\n      }\n      if (!subscription) {\n        subscription = observable.subscribe(dataListener, errorListener);\n      }\n      return () => {\n        subscription == null ? void 0 : subscription.unsubscribe();\n        subscription = null;\n      };\n    };\n    return { dataAtom, observable };\n  });\n  const observableAtom = atom(\n    (get) => {\n      const { dataAtom } = get(observableResultAtom);\n      return get(dataAtom);\n    },\n    (get, set, data) => {\n      const { dataAtom, observable } = get(observableResultAtom);\n      if (\"next\" in observable) {\n        let subscription = null;\n        const callback = (data2) => {\n          set(dataAtom, data2);\n          subscription == null ? void 0 : subscription.unsubscribe();\n        };\n        subscription = observable.subscribe(callback);\n        observable.next(data);\n      } else {\n        throw new Error(\"observable is not subject\");\n      }\n    }\n  );\n  return observableAtom;\n}\nfunction getInitialValue(options) {\n  const initialValue = options.initialValue;\n  return initialValue instanceof Function ? initialValue() : initialValue;\n}\n\nconst hydratedMap = /* @__PURE__ */ new WeakMap();\nfunction useHydrateAtoms(values, scope) {\n  const ScopeContext = SECRET_INTERNAL_getScopeContext(scope);\n  const scopeContainer = useContext(ScopeContext);\n  const store = scopeContainer.s;\n  const hydratedSet = getHydratedSet(scopeContainer);\n  const tuplesToRestore = [];\n  for (const tuple of values) {\n    const atom = tuple[0];\n    if (!hydratedSet.has(atom)) {\n      hydratedSet.add(atom);\n      tuplesToRestore.push(tuple);\n    }\n  }\n  if (tuplesToRestore.length) {\n    store[RESTORE_ATOMS](tuplesToRestore);\n  }\n}\nfunction getHydratedSet(scopeContainer) {\n  let hydratedSet = hydratedMap.get(scopeContainer);\n  if (!hydratedSet) {\n    hydratedSet = /* @__PURE__ */ new WeakSet();\n    hydratedMap.set(scopeContainer, hydratedSet);\n  }\n  return hydratedSet;\n}\n\nconst memoizeAtom = createMemoizeAtom();\nconst LOADING = { state: \"loading\" };\nfunction loadable(anAtom) {\n  return memoizeAtom(() => {\n    const loadableAtomCache = /* @__PURE__ */ new WeakMap();\n    const catchAtom = atom((get) => {\n      let promise;\n      try {\n        const data = get(anAtom);\n        const loadableAtom2 = atom({ state: \"hasData\", data });\n        return loadableAtom2;\n      } catch (error) {\n        if (error instanceof Promise) {\n          promise = error;\n        } else {\n          const loadableAtom2 = atom({\n            state: \"hasError\",\n            error\n          });\n          return loadableAtom2;\n        }\n      }\n      const cached = loadableAtomCache.get(promise);\n      if (cached) {\n        return cached;\n      }\n      const loadableAtom = atom(\n        LOADING,\n        async (get2, set) => {\n          try {\n            const data = await get2(anAtom, { unstable_promise: true });\n            set(loadableAtom, { state: \"hasData\", data });\n          } catch (error) {\n            set(loadableAtom, { state: \"hasError\", error });\n          }\n        }\n      );\n      loadableAtom.onMount = (init) => {\n        init();\n      };\n      loadableAtomCache.set(promise, loadableAtom);\n      return loadableAtom;\n    });\n    const derivedAtom = atom((get) => {\n      const loadableAtom = get(catchAtom);\n      return get(loadableAtom);\n    });\n    return derivedAtom;\n  }, [anAtom]);\n}\n\nexport { RESET, atomFamily, atomWithDefault, atomWithHash, atomWithObservable, atomWithReducer, atomWithReset, atomWithStorage, createJSONStorage, freezeAtom, freezeAtomCreator, loadable, selectAtom, splitAtom, useAtomCallback, useHydrateAtoms, useReducerAtom, useResetAtom, waitForAll };\n"],"names":["RESET","Symbol","createMemoizeAtom","cache","WeakMap","createAtom","deps","cachedAtom","dep","rest","entry","get","length","getWeakCacheItem","createdAtom","item","set","setWeakCacheItem","defaultStorage","getStringStorage","lastStr","lastValue","getItem","key","parse","str2","JSON","str","Promise","then","setItem","newValue","stringify","removeItem","createJSONStorage","localStorage","atomWithHash","initialValue","options","serialize","deserialize","subscribe","callback","window","addEventListener","removeEventListener","hashStorage","key2","storedValue","URLSearchParams","location","hash","slice","Error","searchParams","replaceState","history","toString","delete","delayInit","setValue","storage","getInitialValue","value","catch","baseAtom","onMount","setAtom","unsub","update","atomWithStorage","storageEventCallback","e"],"sourceRoot":""}