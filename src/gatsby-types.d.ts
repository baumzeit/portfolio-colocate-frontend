/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid'
  | 'url';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 'CENTER'
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | 'AUTO'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiArea: STRAPI_AREAConnection;
  readonly allStrapiComponentSharedContact: STRAPI__COMPONENT_SHARED_CONTACTConnection;
  readonly allStrapiComponentSharedLinks: STRAPI__COMPONENT_SHARED_LINKSConnection;
  readonly allStrapiComponentSharedProfile: STRAPI__COMPONENT_SHARED_PROFILEConnection;
  readonly allStrapiComponentSharedSeo: STRAPI__COMPONENT_SHARED_SEOConnection;
  readonly allStrapiComponentSharedTextItem: STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection;
  readonly allStrapiHome: STRAPI_HOMEConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly allStrapiOrganization: STRAPI_ORGANIZATIONConnection;
  readonly allStrapiProject: STRAPI_PROJECTConnection;
  readonly allStrapiProjectDescriptionTextnode: STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiTag: STRAPI_TAGConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiArea: Maybe<STRAPI_AREA>;
  readonly strapiComponentSharedContact: Maybe<STRAPI__COMPONENT_SHARED_CONTACT>;
  readonly strapiComponentSharedLinks: Maybe<STRAPI__COMPONENT_SHARED_LINKS>;
  readonly strapiComponentSharedProfile: Maybe<STRAPI__COMPONENT_SHARED_PROFILE>;
  readonly strapiComponentSharedSeo: Maybe<STRAPI__COMPONENT_SHARED_SEO>;
  readonly strapiComponentSharedTextItem: Maybe<STRAPI__COMPONENT_SHARED_TEXT_ITEM>;
  readonly strapiHome: Maybe<STRAPI_HOME>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
  readonly strapiOrganization: Maybe<STRAPI_ORGANIZATION>;
  readonly strapiProject: Maybe<STRAPI_PROJECT>;
  readonly strapiProjectDescriptionTextnode: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly strapiTag: Maybe<STRAPI_TAG>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allStrapiAreaArgs = {
  filter: InputMaybe<STRAPI_AREAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_AREASortInput>;
};


type Query_allStrapiComponentSharedContactArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SHARED_CONTACTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__COMPONENT_SHARED_CONTACTSortInput>;
};


type Query_allStrapiComponentSharedLinksArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSSortInput>;
};


type Query_allStrapiComponentSharedProfileArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SHARED_PROFILEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__COMPONENT_SHARED_PROFILESortInput>;
};


type Query_allStrapiComponentSharedSeoArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SHARED_SEOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__COMPONENT_SHARED_SEOSortInput>;
};


type Query_allStrapiComponentSharedTextItemArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMSortInput>;
};


type Query_allStrapiHomeArgs = {
  filter: InputMaybe<STRAPI_HOMEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_HOMESortInput>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__MEDIASortInput>;
};


type Query_allStrapiOrganizationArgs = {
  filter: InputMaybe<STRAPI_ORGANIZATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_ORGANIZATIONSortInput>;
};


type Query_allStrapiProjectArgs = {
  filter: InputMaybe<STRAPI_PROJECTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_PROJECTSortInput>;
};


type Query_allStrapiProjectDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODESortInput>;
};


type Query_allStrapiTagArgs = {
  filter: InputMaybe<STRAPI_TAGFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_TAGSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAreaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  color: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  tags: InputMaybe<STRAPI_TAGFilterListInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiComponentSharedContactArgs = {
  button: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentSharedLinksArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentSharedProfileArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  picture: InputMaybe<STRAPI__MEDIAFilterInput>;
  qualities: InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterListInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentSharedSeoArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  metaDescription: InputMaybe<StringQueryOperatorInput>;
  metaTitle: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentSharedTextItemArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiHomeArgs = {
  areas: InputMaybe<STRAPI_AREAFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  contact: InputMaybe<STRAPI__COMPONENT_SHARED_CONTACTFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  introText: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  profile: InputMaybe<STRAPI__COMPONENT_SHARED_PROFILEFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  seo: InputMaybe<STRAPI__COMPONENT_SHARED_SEOFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiMediaArgs = {
  alternativeText: InputMaybe<StringQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiOrganizationArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiProjectArgs = {
  areas: InputMaybe<STRAPI_AREAFilterListInput>;
  childStrapiProjectDescriptionTextnode: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenStrapiProjectDescriptionTextnode: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterListInput>;
  coverImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_PROJECTDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  images: InputMaybe<STRAPI__MEDIAFilterListInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  organization: InputMaybe<STRAPI_ORGANIZATIONFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  tags: InputMaybe<STRAPI_TAGFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiProjectDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiTagArgs = {
  areas: InputMaybe<STRAPI_AREAFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_AREA = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly color: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<STRAPI_TAG>>>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_AREA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AREAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREAEdge>;
  readonly group: ReadonlyArray<STRAPI_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREAConnection_distinctArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAConnection_groupArgs = {
  field: STRAPI_AREAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREAConnection_maxArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAConnection_minArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAConnection_sumArgs = {
  field: STRAPI_AREAFieldsEnum;
};

type STRAPI_AREAEdge = {
  readonly next: Maybe<STRAPI_AREA>;
  readonly node: STRAPI_AREA;
  readonly previous: Maybe<STRAPI_AREA>;
};

type STRAPI_AREAFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'color'
  | 'createdAt'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'projects'
  | 'projects.areas'
  | 'projects.areas.children'
  | 'projects.areas.children.children'
  | 'projects.areas.children.id'
  | 'projects.areas.color'
  | 'projects.areas.createdAt'
  | 'projects.areas.description'
  | 'projects.areas.id'
  | 'projects.areas.internal.content'
  | 'projects.areas.internal.contentDigest'
  | 'projects.areas.internal.description'
  | 'projects.areas.internal.fieldOwners'
  | 'projects.areas.internal.ignoreType'
  | 'projects.areas.internal.mediaType'
  | 'projects.areas.internal.owner'
  | 'projects.areas.internal.type'
  | 'projects.areas.name'
  | 'projects.areas.parent.children'
  | 'projects.areas.parent.id'
  | 'projects.areas.projects'
  | 'projects.areas.projects.areas'
  | 'projects.areas.projects.children'
  | 'projects.areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.areas.projects.createdAt'
  | 'projects.areas.projects.id'
  | 'projects.areas.projects.images'
  | 'projects.areas.projects.links'
  | 'projects.areas.projects.name'
  | 'projects.areas.projects.publishedAt'
  | 'projects.areas.projects.slug'
  | 'projects.areas.projects.strapi_id'
  | 'projects.areas.projects.tags'
  | 'projects.areas.projects.title'
  | 'projects.areas.projects.updatedAt'
  | 'projects.areas.publishedAt'
  | 'projects.areas.slug'
  | 'projects.areas.strapi_id'
  | 'projects.areas.tags'
  | 'projects.areas.tags.areas'
  | 'projects.areas.tags.children'
  | 'projects.areas.tags.createdAt'
  | 'projects.areas.tags.id'
  | 'projects.areas.tags.name'
  | 'projects.areas.tags.projects'
  | 'projects.areas.tags.publishedAt'
  | 'projects.areas.tags.strapi_id'
  | 'projects.areas.tags.updatedAt'
  | 'projects.areas.updatedAt'
  | 'projects.childStrapiProjectDescriptionTextnode.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childStrapiProjectDescriptionTextnode.description'
  | 'projects.childStrapiProjectDescriptionTextnode.id'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children.children'
  | 'projects.children.children.children'
  | 'projects.children.children.id'
  | 'projects.children.id'
  | 'projects.children.internal.content'
  | 'projects.children.internal.contentDigest'
  | 'projects.children.internal.description'
  | 'projects.children.internal.fieldOwners'
  | 'projects.children.internal.ignoreType'
  | 'projects.children.internal.mediaType'
  | 'projects.children.internal.owner'
  | 'projects.children.internal.type'
  | 'projects.children.parent.children'
  | 'projects.children.parent.id'
  | 'projects.coverImage.alternativeText'
  | 'projects.coverImage.caption'
  | 'projects.coverImage.children'
  | 'projects.coverImage.children.children'
  | 'projects.coverImage.children.id'
  | 'projects.coverImage.createdAt'
  | 'projects.coverImage.ext'
  | 'projects.coverImage.hash'
  | 'projects.coverImage.height'
  | 'projects.coverImage.id'
  | 'projects.coverImage.internal.content'
  | 'projects.coverImage.internal.contentDigest'
  | 'projects.coverImage.internal.description'
  | 'projects.coverImage.internal.fieldOwners'
  | 'projects.coverImage.internal.ignoreType'
  | 'projects.coverImage.internal.mediaType'
  | 'projects.coverImage.internal.owner'
  | 'projects.coverImage.internal.type'
  | 'projects.coverImage.localFile.absolutePath'
  | 'projects.coverImage.localFile.accessTime'
  | 'projects.coverImage.localFile.atime'
  | 'projects.coverImage.localFile.atimeMs'
  | 'projects.coverImage.localFile.base'
  | 'projects.coverImage.localFile.birthTime'
  | 'projects.coverImage.localFile.birthtime'
  | 'projects.coverImage.localFile.birthtimeMs'
  | 'projects.coverImage.localFile.blksize'
  | 'projects.coverImage.localFile.blocks'
  | 'projects.coverImage.localFile.changeTime'
  | 'projects.coverImage.localFile.children'
  | 'projects.coverImage.localFile.childrenImageSharp'
  | 'projects.coverImage.localFile.ctime'
  | 'projects.coverImage.localFile.ctimeMs'
  | 'projects.coverImage.localFile.dev'
  | 'projects.coverImage.localFile.dir'
  | 'projects.coverImage.localFile.ext'
  | 'projects.coverImage.localFile.extension'
  | 'projects.coverImage.localFile.gid'
  | 'projects.coverImage.localFile.id'
  | 'projects.coverImage.localFile.ino'
  | 'projects.coverImage.localFile.mode'
  | 'projects.coverImage.localFile.modifiedTime'
  | 'projects.coverImage.localFile.mtime'
  | 'projects.coverImage.localFile.mtimeMs'
  | 'projects.coverImage.localFile.name'
  | 'projects.coverImage.localFile.nlink'
  | 'projects.coverImage.localFile.prettySize'
  | 'projects.coverImage.localFile.publicURL'
  | 'projects.coverImage.localFile.rdev'
  | 'projects.coverImage.localFile.relativeDirectory'
  | 'projects.coverImage.localFile.relativePath'
  | 'projects.coverImage.localFile.root'
  | 'projects.coverImage.localFile.size'
  | 'projects.coverImage.localFile.sourceInstanceName'
  | 'projects.coverImage.localFile.uid'
  | 'projects.coverImage.localFile.url'
  | 'projects.coverImage.mime'
  | 'projects.coverImage.name'
  | 'projects.coverImage.parent.children'
  | 'projects.coverImage.parent.id'
  | 'projects.coverImage.size'
  | 'projects.coverImage.strapi_id'
  | 'projects.coverImage.updatedAt'
  | 'projects.coverImage.url'
  | 'projects.coverImage.width'
  | 'projects.createdAt'
  | 'projects.description.data.children'
  | 'projects.description.data.description'
  | 'projects.description.data.id'
  | 'projects.description.medias'
  | 'projects.description.medias.alternativeText'
  | 'projects.description.medias.src'
  | 'projects.description.medias.url'
  | 'projects.id'
  | 'projects.images'
  | 'projects.images.alternativeText'
  | 'projects.images.caption'
  | 'projects.images.children'
  | 'projects.images.children.children'
  | 'projects.images.children.id'
  | 'projects.images.createdAt'
  | 'projects.images.ext'
  | 'projects.images.hash'
  | 'projects.images.height'
  | 'projects.images.id'
  | 'projects.images.internal.content'
  | 'projects.images.internal.contentDigest'
  | 'projects.images.internal.description'
  | 'projects.images.internal.fieldOwners'
  | 'projects.images.internal.ignoreType'
  | 'projects.images.internal.mediaType'
  | 'projects.images.internal.owner'
  | 'projects.images.internal.type'
  | 'projects.images.localFile.absolutePath'
  | 'projects.images.localFile.accessTime'
  | 'projects.images.localFile.atime'
  | 'projects.images.localFile.atimeMs'
  | 'projects.images.localFile.base'
  | 'projects.images.localFile.birthTime'
  | 'projects.images.localFile.birthtime'
  | 'projects.images.localFile.birthtimeMs'
  | 'projects.images.localFile.blksize'
  | 'projects.images.localFile.blocks'
  | 'projects.images.localFile.changeTime'
  | 'projects.images.localFile.children'
  | 'projects.images.localFile.childrenImageSharp'
  | 'projects.images.localFile.ctime'
  | 'projects.images.localFile.ctimeMs'
  | 'projects.images.localFile.dev'
  | 'projects.images.localFile.dir'
  | 'projects.images.localFile.ext'
  | 'projects.images.localFile.extension'
  | 'projects.images.localFile.gid'
  | 'projects.images.localFile.id'
  | 'projects.images.localFile.ino'
  | 'projects.images.localFile.mode'
  | 'projects.images.localFile.modifiedTime'
  | 'projects.images.localFile.mtime'
  | 'projects.images.localFile.mtimeMs'
  | 'projects.images.localFile.name'
  | 'projects.images.localFile.nlink'
  | 'projects.images.localFile.prettySize'
  | 'projects.images.localFile.publicURL'
  | 'projects.images.localFile.rdev'
  | 'projects.images.localFile.relativeDirectory'
  | 'projects.images.localFile.relativePath'
  | 'projects.images.localFile.root'
  | 'projects.images.localFile.size'
  | 'projects.images.localFile.sourceInstanceName'
  | 'projects.images.localFile.uid'
  | 'projects.images.localFile.url'
  | 'projects.images.mime'
  | 'projects.images.name'
  | 'projects.images.parent.children'
  | 'projects.images.parent.id'
  | 'projects.images.size'
  | 'projects.images.strapi_id'
  | 'projects.images.updatedAt'
  | 'projects.images.url'
  | 'projects.images.width'
  | 'projects.internal.content'
  | 'projects.internal.contentDigest'
  | 'projects.internal.description'
  | 'projects.internal.fieldOwners'
  | 'projects.internal.ignoreType'
  | 'projects.internal.mediaType'
  | 'projects.internal.owner'
  | 'projects.internal.type'
  | 'projects.links'
  | 'projects.links.children'
  | 'projects.links.children.children'
  | 'projects.links.children.id'
  | 'projects.links.id'
  | 'projects.links.internal.content'
  | 'projects.links.internal.contentDigest'
  | 'projects.links.internal.description'
  | 'projects.links.internal.fieldOwners'
  | 'projects.links.internal.ignoreType'
  | 'projects.links.internal.mediaType'
  | 'projects.links.internal.owner'
  | 'projects.links.internal.type'
  | 'projects.links.label'
  | 'projects.links.link'
  | 'projects.links.parent.children'
  | 'projects.links.parent.id'
  | 'projects.links.strapi_id'
  | 'projects.name'
  | 'projects.organization.children'
  | 'projects.organization.children.children'
  | 'projects.organization.children.id'
  | 'projects.organization.createdAt'
  | 'projects.organization.id'
  | 'projects.organization.internal.content'
  | 'projects.organization.internal.contentDigest'
  | 'projects.organization.internal.description'
  | 'projects.organization.internal.fieldOwners'
  | 'projects.organization.internal.ignoreType'
  | 'projects.organization.internal.mediaType'
  | 'projects.organization.internal.owner'
  | 'projects.organization.internal.type'
  | 'projects.organization.link'
  | 'projects.organization.name'
  | 'projects.organization.parent.children'
  | 'projects.organization.parent.id'
  | 'projects.organization.projects'
  | 'projects.organization.projects.areas'
  | 'projects.organization.projects.children'
  | 'projects.organization.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.organization.projects.createdAt'
  | 'projects.organization.projects.id'
  | 'projects.organization.projects.images'
  | 'projects.organization.projects.links'
  | 'projects.organization.projects.name'
  | 'projects.organization.projects.publishedAt'
  | 'projects.organization.projects.slug'
  | 'projects.organization.projects.strapi_id'
  | 'projects.organization.projects.tags'
  | 'projects.organization.projects.title'
  | 'projects.organization.projects.updatedAt'
  | 'projects.organization.publishedAt'
  | 'projects.organization.strapi_id'
  | 'projects.organization.updatedAt'
  | 'projects.parent.children'
  | 'projects.parent.children.children'
  | 'projects.parent.children.id'
  | 'projects.parent.id'
  | 'projects.parent.internal.content'
  | 'projects.parent.internal.contentDigest'
  | 'projects.parent.internal.description'
  | 'projects.parent.internal.fieldOwners'
  | 'projects.parent.internal.ignoreType'
  | 'projects.parent.internal.mediaType'
  | 'projects.parent.internal.owner'
  | 'projects.parent.internal.type'
  | 'projects.parent.parent.children'
  | 'projects.parent.parent.id'
  | 'projects.publishedAt'
  | 'projects.slug'
  | 'projects.strapi_id'
  | 'projects.tags'
  | 'projects.tags.areas'
  | 'projects.tags.areas.children'
  | 'projects.tags.areas.color'
  | 'projects.tags.areas.createdAt'
  | 'projects.tags.areas.description'
  | 'projects.tags.areas.id'
  | 'projects.tags.areas.name'
  | 'projects.tags.areas.projects'
  | 'projects.tags.areas.publishedAt'
  | 'projects.tags.areas.slug'
  | 'projects.tags.areas.strapi_id'
  | 'projects.tags.areas.tags'
  | 'projects.tags.areas.updatedAt'
  | 'projects.tags.children'
  | 'projects.tags.children.children'
  | 'projects.tags.children.id'
  | 'projects.tags.createdAt'
  | 'projects.tags.id'
  | 'projects.tags.internal.content'
  | 'projects.tags.internal.contentDigest'
  | 'projects.tags.internal.description'
  | 'projects.tags.internal.fieldOwners'
  | 'projects.tags.internal.ignoreType'
  | 'projects.tags.internal.mediaType'
  | 'projects.tags.internal.owner'
  | 'projects.tags.internal.type'
  | 'projects.tags.name'
  | 'projects.tags.parent.children'
  | 'projects.tags.parent.id'
  | 'projects.tags.projects'
  | 'projects.tags.projects.areas'
  | 'projects.tags.projects.children'
  | 'projects.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.tags.projects.createdAt'
  | 'projects.tags.projects.id'
  | 'projects.tags.projects.images'
  | 'projects.tags.projects.links'
  | 'projects.tags.projects.name'
  | 'projects.tags.projects.publishedAt'
  | 'projects.tags.projects.slug'
  | 'projects.tags.projects.strapi_id'
  | 'projects.tags.projects.tags'
  | 'projects.tags.projects.title'
  | 'projects.tags.projects.updatedAt'
  | 'projects.tags.publishedAt'
  | 'projects.tags.strapi_id'
  | 'projects.tags.updatedAt'
  | 'projects.title'
  | 'projects.updatedAt'
  | 'publishedAt'
  | 'slug'
  | 'strapi_id'
  | 'tags'
  | 'tags.areas'
  | 'tags.areas.children'
  | 'tags.areas.children.children'
  | 'tags.areas.children.id'
  | 'tags.areas.color'
  | 'tags.areas.createdAt'
  | 'tags.areas.description'
  | 'tags.areas.id'
  | 'tags.areas.internal.content'
  | 'tags.areas.internal.contentDigest'
  | 'tags.areas.internal.description'
  | 'tags.areas.internal.fieldOwners'
  | 'tags.areas.internal.ignoreType'
  | 'tags.areas.internal.mediaType'
  | 'tags.areas.internal.owner'
  | 'tags.areas.internal.type'
  | 'tags.areas.name'
  | 'tags.areas.parent.children'
  | 'tags.areas.parent.id'
  | 'tags.areas.projects'
  | 'tags.areas.projects.areas'
  | 'tags.areas.projects.children'
  | 'tags.areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'tags.areas.projects.createdAt'
  | 'tags.areas.projects.id'
  | 'tags.areas.projects.images'
  | 'tags.areas.projects.links'
  | 'tags.areas.projects.name'
  | 'tags.areas.projects.publishedAt'
  | 'tags.areas.projects.slug'
  | 'tags.areas.projects.strapi_id'
  | 'tags.areas.projects.tags'
  | 'tags.areas.projects.title'
  | 'tags.areas.projects.updatedAt'
  | 'tags.areas.publishedAt'
  | 'tags.areas.slug'
  | 'tags.areas.strapi_id'
  | 'tags.areas.tags'
  | 'tags.areas.tags.areas'
  | 'tags.areas.tags.children'
  | 'tags.areas.tags.createdAt'
  | 'tags.areas.tags.id'
  | 'tags.areas.tags.name'
  | 'tags.areas.tags.projects'
  | 'tags.areas.tags.publishedAt'
  | 'tags.areas.tags.strapi_id'
  | 'tags.areas.tags.updatedAt'
  | 'tags.areas.updatedAt'
  | 'tags.children'
  | 'tags.children.children'
  | 'tags.children.children.children'
  | 'tags.children.children.id'
  | 'tags.children.id'
  | 'tags.children.internal.content'
  | 'tags.children.internal.contentDigest'
  | 'tags.children.internal.description'
  | 'tags.children.internal.fieldOwners'
  | 'tags.children.internal.ignoreType'
  | 'tags.children.internal.mediaType'
  | 'tags.children.internal.owner'
  | 'tags.children.internal.type'
  | 'tags.children.parent.children'
  | 'tags.children.parent.id'
  | 'tags.createdAt'
  | 'tags.id'
  | 'tags.internal.content'
  | 'tags.internal.contentDigest'
  | 'tags.internal.description'
  | 'tags.internal.fieldOwners'
  | 'tags.internal.ignoreType'
  | 'tags.internal.mediaType'
  | 'tags.internal.owner'
  | 'tags.internal.type'
  | 'tags.name'
  | 'tags.parent.children'
  | 'tags.parent.children.children'
  | 'tags.parent.children.id'
  | 'tags.parent.id'
  | 'tags.parent.internal.content'
  | 'tags.parent.internal.contentDigest'
  | 'tags.parent.internal.description'
  | 'tags.parent.internal.fieldOwners'
  | 'tags.parent.internal.ignoreType'
  | 'tags.parent.internal.mediaType'
  | 'tags.parent.internal.owner'
  | 'tags.parent.internal.type'
  | 'tags.parent.parent.children'
  | 'tags.parent.parent.id'
  | 'tags.projects'
  | 'tags.projects.areas'
  | 'tags.projects.areas.children'
  | 'tags.projects.areas.color'
  | 'tags.projects.areas.createdAt'
  | 'tags.projects.areas.description'
  | 'tags.projects.areas.id'
  | 'tags.projects.areas.name'
  | 'tags.projects.areas.projects'
  | 'tags.projects.areas.publishedAt'
  | 'tags.projects.areas.slug'
  | 'tags.projects.areas.strapi_id'
  | 'tags.projects.areas.tags'
  | 'tags.projects.areas.updatedAt'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.children'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.description'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.id'
  | 'tags.projects.children'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'tags.projects.children.children'
  | 'tags.projects.children.id'
  | 'tags.projects.coverImage.alternativeText'
  | 'tags.projects.coverImage.caption'
  | 'tags.projects.coverImage.children'
  | 'tags.projects.coverImage.createdAt'
  | 'tags.projects.coverImage.ext'
  | 'tags.projects.coverImage.hash'
  | 'tags.projects.coverImage.height'
  | 'tags.projects.coverImage.id'
  | 'tags.projects.coverImage.mime'
  | 'tags.projects.coverImage.name'
  | 'tags.projects.coverImage.size'
  | 'tags.projects.coverImage.strapi_id'
  | 'tags.projects.coverImage.updatedAt'
  | 'tags.projects.coverImage.url'
  | 'tags.projects.coverImage.width'
  | 'tags.projects.createdAt'
  | 'tags.projects.description.medias'
  | 'tags.projects.id'
  | 'tags.projects.images'
  | 'tags.projects.images.alternativeText'
  | 'tags.projects.images.caption'
  | 'tags.projects.images.children'
  | 'tags.projects.images.createdAt'
  | 'tags.projects.images.ext'
  | 'tags.projects.images.hash'
  | 'tags.projects.images.height'
  | 'tags.projects.images.id'
  | 'tags.projects.images.mime'
  | 'tags.projects.images.name'
  | 'tags.projects.images.size'
  | 'tags.projects.images.strapi_id'
  | 'tags.projects.images.updatedAt'
  | 'tags.projects.images.url'
  | 'tags.projects.images.width'
  | 'tags.projects.internal.content'
  | 'tags.projects.internal.contentDigest'
  | 'tags.projects.internal.description'
  | 'tags.projects.internal.fieldOwners'
  | 'tags.projects.internal.ignoreType'
  | 'tags.projects.internal.mediaType'
  | 'tags.projects.internal.owner'
  | 'tags.projects.internal.type'
  | 'tags.projects.links'
  | 'tags.projects.links.children'
  | 'tags.projects.links.id'
  | 'tags.projects.links.label'
  | 'tags.projects.links.link'
  | 'tags.projects.links.strapi_id'
  | 'tags.projects.name'
  | 'tags.projects.organization.children'
  | 'tags.projects.organization.createdAt'
  | 'tags.projects.organization.id'
  | 'tags.projects.organization.link'
  | 'tags.projects.organization.name'
  | 'tags.projects.organization.projects'
  | 'tags.projects.organization.publishedAt'
  | 'tags.projects.organization.strapi_id'
  | 'tags.projects.organization.updatedAt'
  | 'tags.projects.parent.children'
  | 'tags.projects.parent.id'
  | 'tags.projects.publishedAt'
  | 'tags.projects.slug'
  | 'tags.projects.strapi_id'
  | 'tags.projects.tags'
  | 'tags.projects.tags.areas'
  | 'tags.projects.tags.children'
  | 'tags.projects.tags.createdAt'
  | 'tags.projects.tags.id'
  | 'tags.projects.tags.name'
  | 'tags.projects.tags.projects'
  | 'tags.projects.tags.publishedAt'
  | 'tags.projects.tags.strapi_id'
  | 'tags.projects.tags.updatedAt'
  | 'tags.projects.title'
  | 'tags.projects.updatedAt'
  | 'tags.publishedAt'
  | 'tags.strapi_id'
  | 'tags.updatedAt'
  | 'updatedAt';

type STRAPI_AREAFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly tags: InputMaybe<STRAPI_TAGFilterListInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_AREAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_AREAFilterInput>;
};

type STRAPI_AREAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREAGroupConnection_distinctArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAGroupConnection_groupArgs = {
  field: STRAPI_AREAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREAGroupConnection_maxArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAGroupConnection_minArgs = {
  field: STRAPI_AREAFieldsEnum;
};


type STRAPI_AREAGroupConnection_sumArgs = {
  field: STRAPI_AREAFieldsEnum;
};

type STRAPI_AREASortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AREAFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_HOME = Node & {
  readonly areas: Maybe<ReadonlyArray<Maybe<STRAPI_AREA>>>;
  readonly children: ReadonlyArray<Node>;
  readonly contact: Maybe<STRAPI__COMPONENT_SHARED_CONTACT>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly introText: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly profile: Maybe<STRAPI__COMPONENT_SHARED_PROFILE>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly seo: Maybe<STRAPI__COMPONENT_SHARED_SEO>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_HOME_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_HOME_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_HOME_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_HOMEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_HOMEEdge>;
  readonly group: ReadonlyArray<STRAPI_HOMEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_HOME>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_HOMEConnection_distinctArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEConnection_groupArgs = {
  field: STRAPI_HOMEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_HOMEConnection_maxArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEConnection_minArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEConnection_sumArgs = {
  field: STRAPI_HOMEFieldsEnum;
};

type STRAPI_HOMEEdge = {
  readonly next: Maybe<STRAPI_HOME>;
  readonly node: STRAPI_HOME;
  readonly previous: Maybe<STRAPI_HOME>;
};

type STRAPI_HOMEFieldsEnum =
  | 'areas'
  | 'areas.children'
  | 'areas.children.children'
  | 'areas.children.children.children'
  | 'areas.children.children.id'
  | 'areas.children.id'
  | 'areas.children.internal.content'
  | 'areas.children.internal.contentDigest'
  | 'areas.children.internal.description'
  | 'areas.children.internal.fieldOwners'
  | 'areas.children.internal.ignoreType'
  | 'areas.children.internal.mediaType'
  | 'areas.children.internal.owner'
  | 'areas.children.internal.type'
  | 'areas.children.parent.children'
  | 'areas.children.parent.id'
  | 'areas.color'
  | 'areas.createdAt'
  | 'areas.description'
  | 'areas.id'
  | 'areas.internal.content'
  | 'areas.internal.contentDigest'
  | 'areas.internal.description'
  | 'areas.internal.fieldOwners'
  | 'areas.internal.ignoreType'
  | 'areas.internal.mediaType'
  | 'areas.internal.owner'
  | 'areas.internal.type'
  | 'areas.name'
  | 'areas.parent.children'
  | 'areas.parent.children.children'
  | 'areas.parent.children.id'
  | 'areas.parent.id'
  | 'areas.parent.internal.content'
  | 'areas.parent.internal.contentDigest'
  | 'areas.parent.internal.description'
  | 'areas.parent.internal.fieldOwners'
  | 'areas.parent.internal.ignoreType'
  | 'areas.parent.internal.mediaType'
  | 'areas.parent.internal.owner'
  | 'areas.parent.internal.type'
  | 'areas.parent.parent.children'
  | 'areas.parent.parent.id'
  | 'areas.projects'
  | 'areas.projects.areas'
  | 'areas.projects.areas.children'
  | 'areas.projects.areas.color'
  | 'areas.projects.areas.createdAt'
  | 'areas.projects.areas.description'
  | 'areas.projects.areas.id'
  | 'areas.projects.areas.name'
  | 'areas.projects.areas.projects'
  | 'areas.projects.areas.publishedAt'
  | 'areas.projects.areas.slug'
  | 'areas.projects.areas.strapi_id'
  | 'areas.projects.areas.tags'
  | 'areas.projects.areas.updatedAt'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children.children'
  | 'areas.projects.children.id'
  | 'areas.projects.coverImage.alternativeText'
  | 'areas.projects.coverImage.caption'
  | 'areas.projects.coverImage.children'
  | 'areas.projects.coverImage.createdAt'
  | 'areas.projects.coverImage.ext'
  | 'areas.projects.coverImage.hash'
  | 'areas.projects.coverImage.height'
  | 'areas.projects.coverImage.id'
  | 'areas.projects.coverImage.mime'
  | 'areas.projects.coverImage.name'
  | 'areas.projects.coverImage.size'
  | 'areas.projects.coverImage.strapi_id'
  | 'areas.projects.coverImage.updatedAt'
  | 'areas.projects.coverImage.url'
  | 'areas.projects.coverImage.width'
  | 'areas.projects.createdAt'
  | 'areas.projects.description.medias'
  | 'areas.projects.id'
  | 'areas.projects.images'
  | 'areas.projects.images.alternativeText'
  | 'areas.projects.images.caption'
  | 'areas.projects.images.children'
  | 'areas.projects.images.createdAt'
  | 'areas.projects.images.ext'
  | 'areas.projects.images.hash'
  | 'areas.projects.images.height'
  | 'areas.projects.images.id'
  | 'areas.projects.images.mime'
  | 'areas.projects.images.name'
  | 'areas.projects.images.size'
  | 'areas.projects.images.strapi_id'
  | 'areas.projects.images.updatedAt'
  | 'areas.projects.images.url'
  | 'areas.projects.images.width'
  | 'areas.projects.internal.content'
  | 'areas.projects.internal.contentDigest'
  | 'areas.projects.internal.description'
  | 'areas.projects.internal.fieldOwners'
  | 'areas.projects.internal.ignoreType'
  | 'areas.projects.internal.mediaType'
  | 'areas.projects.internal.owner'
  | 'areas.projects.internal.type'
  | 'areas.projects.links'
  | 'areas.projects.links.children'
  | 'areas.projects.links.id'
  | 'areas.projects.links.label'
  | 'areas.projects.links.link'
  | 'areas.projects.links.strapi_id'
  | 'areas.projects.name'
  | 'areas.projects.organization.children'
  | 'areas.projects.organization.createdAt'
  | 'areas.projects.organization.id'
  | 'areas.projects.organization.link'
  | 'areas.projects.organization.name'
  | 'areas.projects.organization.projects'
  | 'areas.projects.organization.publishedAt'
  | 'areas.projects.organization.strapi_id'
  | 'areas.projects.organization.updatedAt'
  | 'areas.projects.parent.children'
  | 'areas.projects.parent.id'
  | 'areas.projects.publishedAt'
  | 'areas.projects.slug'
  | 'areas.projects.strapi_id'
  | 'areas.projects.tags'
  | 'areas.projects.tags.areas'
  | 'areas.projects.tags.children'
  | 'areas.projects.tags.createdAt'
  | 'areas.projects.tags.id'
  | 'areas.projects.tags.name'
  | 'areas.projects.tags.projects'
  | 'areas.projects.tags.publishedAt'
  | 'areas.projects.tags.strapi_id'
  | 'areas.projects.tags.updatedAt'
  | 'areas.projects.title'
  | 'areas.projects.updatedAt'
  | 'areas.publishedAt'
  | 'areas.slug'
  | 'areas.strapi_id'
  | 'areas.tags'
  | 'areas.tags.areas'
  | 'areas.tags.areas.children'
  | 'areas.tags.areas.color'
  | 'areas.tags.areas.createdAt'
  | 'areas.tags.areas.description'
  | 'areas.tags.areas.id'
  | 'areas.tags.areas.name'
  | 'areas.tags.areas.projects'
  | 'areas.tags.areas.publishedAt'
  | 'areas.tags.areas.slug'
  | 'areas.tags.areas.strapi_id'
  | 'areas.tags.areas.tags'
  | 'areas.tags.areas.updatedAt'
  | 'areas.tags.children'
  | 'areas.tags.children.children'
  | 'areas.tags.children.id'
  | 'areas.tags.createdAt'
  | 'areas.tags.id'
  | 'areas.tags.internal.content'
  | 'areas.tags.internal.contentDigest'
  | 'areas.tags.internal.description'
  | 'areas.tags.internal.fieldOwners'
  | 'areas.tags.internal.ignoreType'
  | 'areas.tags.internal.mediaType'
  | 'areas.tags.internal.owner'
  | 'areas.tags.internal.type'
  | 'areas.tags.name'
  | 'areas.tags.parent.children'
  | 'areas.tags.parent.id'
  | 'areas.tags.projects'
  | 'areas.tags.projects.areas'
  | 'areas.tags.projects.children'
  | 'areas.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.tags.projects.createdAt'
  | 'areas.tags.projects.id'
  | 'areas.tags.projects.images'
  | 'areas.tags.projects.links'
  | 'areas.tags.projects.name'
  | 'areas.tags.projects.publishedAt'
  | 'areas.tags.projects.slug'
  | 'areas.tags.projects.strapi_id'
  | 'areas.tags.projects.tags'
  | 'areas.tags.projects.title'
  | 'areas.tags.projects.updatedAt'
  | 'areas.tags.publishedAt'
  | 'areas.tags.strapi_id'
  | 'areas.tags.updatedAt'
  | 'areas.updatedAt'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contact.button.children'
  | 'contact.button.children.children'
  | 'contact.button.children.id'
  | 'contact.button.id'
  | 'contact.button.internal.content'
  | 'contact.button.internal.contentDigest'
  | 'contact.button.internal.description'
  | 'contact.button.internal.fieldOwners'
  | 'contact.button.internal.ignoreType'
  | 'contact.button.internal.mediaType'
  | 'contact.button.internal.owner'
  | 'contact.button.internal.type'
  | 'contact.button.label'
  | 'contact.button.link'
  | 'contact.button.parent.children'
  | 'contact.button.parent.id'
  | 'contact.button.strapi_id'
  | 'contact.children'
  | 'contact.children.children'
  | 'contact.children.children.children'
  | 'contact.children.children.id'
  | 'contact.children.id'
  | 'contact.children.internal.content'
  | 'contact.children.internal.contentDigest'
  | 'contact.children.internal.description'
  | 'contact.children.internal.fieldOwners'
  | 'contact.children.internal.ignoreType'
  | 'contact.children.internal.mediaType'
  | 'contact.children.internal.owner'
  | 'contact.children.internal.type'
  | 'contact.children.parent.children'
  | 'contact.children.parent.id'
  | 'contact.id'
  | 'contact.internal.content'
  | 'contact.internal.contentDigest'
  | 'contact.internal.description'
  | 'contact.internal.fieldOwners'
  | 'contact.internal.ignoreType'
  | 'contact.internal.mediaType'
  | 'contact.internal.owner'
  | 'contact.internal.type'
  | 'contact.parent.children'
  | 'contact.parent.children.children'
  | 'contact.parent.children.id'
  | 'contact.parent.id'
  | 'contact.parent.internal.content'
  | 'contact.parent.internal.contentDigest'
  | 'contact.parent.internal.description'
  | 'contact.parent.internal.fieldOwners'
  | 'contact.parent.internal.ignoreType'
  | 'contact.parent.internal.mediaType'
  | 'contact.parent.internal.owner'
  | 'contact.parent.internal.type'
  | 'contact.parent.parent.children'
  | 'contact.parent.parent.id'
  | 'contact.strapi_id'
  | 'contact.text'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'introText'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'profile.children'
  | 'profile.children.children'
  | 'profile.children.children.children'
  | 'profile.children.children.id'
  | 'profile.children.id'
  | 'profile.children.internal.content'
  | 'profile.children.internal.contentDigest'
  | 'profile.children.internal.description'
  | 'profile.children.internal.fieldOwners'
  | 'profile.children.internal.ignoreType'
  | 'profile.children.internal.mediaType'
  | 'profile.children.internal.owner'
  | 'profile.children.internal.type'
  | 'profile.children.parent.children'
  | 'profile.children.parent.id'
  | 'profile.id'
  | 'profile.internal.content'
  | 'profile.internal.contentDigest'
  | 'profile.internal.description'
  | 'profile.internal.fieldOwners'
  | 'profile.internal.ignoreType'
  | 'profile.internal.mediaType'
  | 'profile.internal.owner'
  | 'profile.internal.type'
  | 'profile.parent.children'
  | 'profile.parent.children.children'
  | 'profile.parent.children.id'
  | 'profile.parent.id'
  | 'profile.parent.internal.content'
  | 'profile.parent.internal.contentDigest'
  | 'profile.parent.internal.description'
  | 'profile.parent.internal.fieldOwners'
  | 'profile.parent.internal.ignoreType'
  | 'profile.parent.internal.mediaType'
  | 'profile.parent.internal.owner'
  | 'profile.parent.internal.type'
  | 'profile.parent.parent.children'
  | 'profile.parent.parent.id'
  | 'profile.picture.alternativeText'
  | 'profile.picture.caption'
  | 'profile.picture.children'
  | 'profile.picture.children.children'
  | 'profile.picture.children.id'
  | 'profile.picture.createdAt'
  | 'profile.picture.ext'
  | 'profile.picture.hash'
  | 'profile.picture.height'
  | 'profile.picture.id'
  | 'profile.picture.internal.content'
  | 'profile.picture.internal.contentDigest'
  | 'profile.picture.internal.description'
  | 'profile.picture.internal.fieldOwners'
  | 'profile.picture.internal.ignoreType'
  | 'profile.picture.internal.mediaType'
  | 'profile.picture.internal.owner'
  | 'profile.picture.internal.type'
  | 'profile.picture.localFile.absolutePath'
  | 'profile.picture.localFile.accessTime'
  | 'profile.picture.localFile.atime'
  | 'profile.picture.localFile.atimeMs'
  | 'profile.picture.localFile.base'
  | 'profile.picture.localFile.birthTime'
  | 'profile.picture.localFile.birthtime'
  | 'profile.picture.localFile.birthtimeMs'
  | 'profile.picture.localFile.blksize'
  | 'profile.picture.localFile.blocks'
  | 'profile.picture.localFile.changeTime'
  | 'profile.picture.localFile.children'
  | 'profile.picture.localFile.childrenImageSharp'
  | 'profile.picture.localFile.ctime'
  | 'profile.picture.localFile.ctimeMs'
  | 'profile.picture.localFile.dev'
  | 'profile.picture.localFile.dir'
  | 'profile.picture.localFile.ext'
  | 'profile.picture.localFile.extension'
  | 'profile.picture.localFile.gid'
  | 'profile.picture.localFile.id'
  | 'profile.picture.localFile.ino'
  | 'profile.picture.localFile.mode'
  | 'profile.picture.localFile.modifiedTime'
  | 'profile.picture.localFile.mtime'
  | 'profile.picture.localFile.mtimeMs'
  | 'profile.picture.localFile.name'
  | 'profile.picture.localFile.nlink'
  | 'profile.picture.localFile.prettySize'
  | 'profile.picture.localFile.publicURL'
  | 'profile.picture.localFile.rdev'
  | 'profile.picture.localFile.relativeDirectory'
  | 'profile.picture.localFile.relativePath'
  | 'profile.picture.localFile.root'
  | 'profile.picture.localFile.size'
  | 'profile.picture.localFile.sourceInstanceName'
  | 'profile.picture.localFile.uid'
  | 'profile.picture.localFile.url'
  | 'profile.picture.mime'
  | 'profile.picture.name'
  | 'profile.picture.parent.children'
  | 'profile.picture.parent.id'
  | 'profile.picture.size'
  | 'profile.picture.strapi_id'
  | 'profile.picture.updatedAt'
  | 'profile.picture.url'
  | 'profile.picture.width'
  | 'profile.qualities'
  | 'profile.qualities.children'
  | 'profile.qualities.children.children'
  | 'profile.qualities.children.id'
  | 'profile.qualities.id'
  | 'profile.qualities.internal.content'
  | 'profile.qualities.internal.contentDigest'
  | 'profile.qualities.internal.description'
  | 'profile.qualities.internal.fieldOwners'
  | 'profile.qualities.internal.ignoreType'
  | 'profile.qualities.internal.mediaType'
  | 'profile.qualities.internal.owner'
  | 'profile.qualities.internal.type'
  | 'profile.qualities.parent.children'
  | 'profile.qualities.parent.id'
  | 'profile.qualities.strapi_id'
  | 'profile.qualities.text'
  | 'profile.strapi_id'
  | 'publishedAt'
  | 'seo.children'
  | 'seo.children.children'
  | 'seo.children.children.children'
  | 'seo.children.children.id'
  | 'seo.children.id'
  | 'seo.children.internal.content'
  | 'seo.children.internal.contentDigest'
  | 'seo.children.internal.description'
  | 'seo.children.internal.fieldOwners'
  | 'seo.children.internal.ignoreType'
  | 'seo.children.internal.mediaType'
  | 'seo.children.internal.owner'
  | 'seo.children.internal.type'
  | 'seo.children.parent.children'
  | 'seo.children.parent.id'
  | 'seo.id'
  | 'seo.internal.content'
  | 'seo.internal.contentDigest'
  | 'seo.internal.description'
  | 'seo.internal.fieldOwners'
  | 'seo.internal.ignoreType'
  | 'seo.internal.mediaType'
  | 'seo.internal.owner'
  | 'seo.internal.type'
  | 'seo.metaDescription'
  | 'seo.metaTitle'
  | 'seo.parent.children'
  | 'seo.parent.children.children'
  | 'seo.parent.children.id'
  | 'seo.parent.id'
  | 'seo.parent.internal.content'
  | 'seo.parent.internal.contentDigest'
  | 'seo.parent.internal.description'
  | 'seo.parent.internal.fieldOwners'
  | 'seo.parent.internal.ignoreType'
  | 'seo.parent.internal.mediaType'
  | 'seo.parent.internal.owner'
  | 'seo.parent.internal.type'
  | 'seo.parent.parent.children'
  | 'seo.parent.parent.id'
  | 'seo.strapi_id'
  | 'strapi_id'
  | 'title'
  | 'updatedAt';

type STRAPI_HOMEFilterInput = {
  readonly areas: InputMaybe<STRAPI_AREAFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contact: InputMaybe<STRAPI__COMPONENT_SHARED_CONTACTFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly introText: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly profile: InputMaybe<STRAPI__COMPONENT_SHARED_PROFILEFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly seo: InputMaybe<STRAPI__COMPONENT_SHARED_SEOFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_HOMEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_HOMEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_HOMEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_HOME>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_HOMEGroupConnection_distinctArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEGroupConnection_groupArgs = {
  field: STRAPI_HOMEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_HOMEGroupConnection_maxArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEGroupConnection_minArgs = {
  field: STRAPI_HOMEFieldsEnum;
};


type STRAPI_HOMEGroupConnection_sumArgs = {
  field: STRAPI_HOMEFieldsEnum;
};

type STRAPI_HOMESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_HOMEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_ORGANIZATION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ORGANIZATION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ORGANIZATION_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ORGANIZATION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ORGANIZATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ORGANIZATIONEdge>;
  readonly group: ReadonlyArray<STRAPI_ORGANIZATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ORGANIZATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ORGANIZATIONConnection_distinctArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONConnection_groupArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ORGANIZATIONConnection_maxArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONConnection_minArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONConnection_sumArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};

type STRAPI_ORGANIZATIONEdge = {
  readonly next: Maybe<STRAPI_ORGANIZATION>;
  readonly node: STRAPI_ORGANIZATION;
  readonly previous: Maybe<STRAPI_ORGANIZATION>;
};

type STRAPI_ORGANIZATIONFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'link'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'projects'
  | 'projects.areas'
  | 'projects.areas.children'
  | 'projects.areas.children.children'
  | 'projects.areas.children.id'
  | 'projects.areas.color'
  | 'projects.areas.createdAt'
  | 'projects.areas.description'
  | 'projects.areas.id'
  | 'projects.areas.internal.content'
  | 'projects.areas.internal.contentDigest'
  | 'projects.areas.internal.description'
  | 'projects.areas.internal.fieldOwners'
  | 'projects.areas.internal.ignoreType'
  | 'projects.areas.internal.mediaType'
  | 'projects.areas.internal.owner'
  | 'projects.areas.internal.type'
  | 'projects.areas.name'
  | 'projects.areas.parent.children'
  | 'projects.areas.parent.id'
  | 'projects.areas.projects'
  | 'projects.areas.projects.areas'
  | 'projects.areas.projects.children'
  | 'projects.areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.areas.projects.createdAt'
  | 'projects.areas.projects.id'
  | 'projects.areas.projects.images'
  | 'projects.areas.projects.links'
  | 'projects.areas.projects.name'
  | 'projects.areas.projects.publishedAt'
  | 'projects.areas.projects.slug'
  | 'projects.areas.projects.strapi_id'
  | 'projects.areas.projects.tags'
  | 'projects.areas.projects.title'
  | 'projects.areas.projects.updatedAt'
  | 'projects.areas.publishedAt'
  | 'projects.areas.slug'
  | 'projects.areas.strapi_id'
  | 'projects.areas.tags'
  | 'projects.areas.tags.areas'
  | 'projects.areas.tags.children'
  | 'projects.areas.tags.createdAt'
  | 'projects.areas.tags.id'
  | 'projects.areas.tags.name'
  | 'projects.areas.tags.projects'
  | 'projects.areas.tags.publishedAt'
  | 'projects.areas.tags.strapi_id'
  | 'projects.areas.tags.updatedAt'
  | 'projects.areas.updatedAt'
  | 'projects.childStrapiProjectDescriptionTextnode.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childStrapiProjectDescriptionTextnode.description'
  | 'projects.childStrapiProjectDescriptionTextnode.id'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children.children'
  | 'projects.children.children.children'
  | 'projects.children.children.id'
  | 'projects.children.id'
  | 'projects.children.internal.content'
  | 'projects.children.internal.contentDigest'
  | 'projects.children.internal.description'
  | 'projects.children.internal.fieldOwners'
  | 'projects.children.internal.ignoreType'
  | 'projects.children.internal.mediaType'
  | 'projects.children.internal.owner'
  | 'projects.children.internal.type'
  | 'projects.children.parent.children'
  | 'projects.children.parent.id'
  | 'projects.coverImage.alternativeText'
  | 'projects.coverImage.caption'
  | 'projects.coverImage.children'
  | 'projects.coverImage.children.children'
  | 'projects.coverImage.children.id'
  | 'projects.coverImage.createdAt'
  | 'projects.coverImage.ext'
  | 'projects.coverImage.hash'
  | 'projects.coverImage.height'
  | 'projects.coverImage.id'
  | 'projects.coverImage.internal.content'
  | 'projects.coverImage.internal.contentDigest'
  | 'projects.coverImage.internal.description'
  | 'projects.coverImage.internal.fieldOwners'
  | 'projects.coverImage.internal.ignoreType'
  | 'projects.coverImage.internal.mediaType'
  | 'projects.coverImage.internal.owner'
  | 'projects.coverImage.internal.type'
  | 'projects.coverImage.localFile.absolutePath'
  | 'projects.coverImage.localFile.accessTime'
  | 'projects.coverImage.localFile.atime'
  | 'projects.coverImage.localFile.atimeMs'
  | 'projects.coverImage.localFile.base'
  | 'projects.coverImage.localFile.birthTime'
  | 'projects.coverImage.localFile.birthtime'
  | 'projects.coverImage.localFile.birthtimeMs'
  | 'projects.coverImage.localFile.blksize'
  | 'projects.coverImage.localFile.blocks'
  | 'projects.coverImage.localFile.changeTime'
  | 'projects.coverImage.localFile.children'
  | 'projects.coverImage.localFile.childrenImageSharp'
  | 'projects.coverImage.localFile.ctime'
  | 'projects.coverImage.localFile.ctimeMs'
  | 'projects.coverImage.localFile.dev'
  | 'projects.coverImage.localFile.dir'
  | 'projects.coverImage.localFile.ext'
  | 'projects.coverImage.localFile.extension'
  | 'projects.coverImage.localFile.gid'
  | 'projects.coverImage.localFile.id'
  | 'projects.coverImage.localFile.ino'
  | 'projects.coverImage.localFile.mode'
  | 'projects.coverImage.localFile.modifiedTime'
  | 'projects.coverImage.localFile.mtime'
  | 'projects.coverImage.localFile.mtimeMs'
  | 'projects.coverImage.localFile.name'
  | 'projects.coverImage.localFile.nlink'
  | 'projects.coverImage.localFile.prettySize'
  | 'projects.coverImage.localFile.publicURL'
  | 'projects.coverImage.localFile.rdev'
  | 'projects.coverImage.localFile.relativeDirectory'
  | 'projects.coverImage.localFile.relativePath'
  | 'projects.coverImage.localFile.root'
  | 'projects.coverImage.localFile.size'
  | 'projects.coverImage.localFile.sourceInstanceName'
  | 'projects.coverImage.localFile.uid'
  | 'projects.coverImage.localFile.url'
  | 'projects.coverImage.mime'
  | 'projects.coverImage.name'
  | 'projects.coverImage.parent.children'
  | 'projects.coverImage.parent.id'
  | 'projects.coverImage.size'
  | 'projects.coverImage.strapi_id'
  | 'projects.coverImage.updatedAt'
  | 'projects.coverImage.url'
  | 'projects.coverImage.width'
  | 'projects.createdAt'
  | 'projects.description.data.children'
  | 'projects.description.data.description'
  | 'projects.description.data.id'
  | 'projects.description.medias'
  | 'projects.description.medias.alternativeText'
  | 'projects.description.medias.src'
  | 'projects.description.medias.url'
  | 'projects.id'
  | 'projects.images'
  | 'projects.images.alternativeText'
  | 'projects.images.caption'
  | 'projects.images.children'
  | 'projects.images.children.children'
  | 'projects.images.children.id'
  | 'projects.images.createdAt'
  | 'projects.images.ext'
  | 'projects.images.hash'
  | 'projects.images.height'
  | 'projects.images.id'
  | 'projects.images.internal.content'
  | 'projects.images.internal.contentDigest'
  | 'projects.images.internal.description'
  | 'projects.images.internal.fieldOwners'
  | 'projects.images.internal.ignoreType'
  | 'projects.images.internal.mediaType'
  | 'projects.images.internal.owner'
  | 'projects.images.internal.type'
  | 'projects.images.localFile.absolutePath'
  | 'projects.images.localFile.accessTime'
  | 'projects.images.localFile.atime'
  | 'projects.images.localFile.atimeMs'
  | 'projects.images.localFile.base'
  | 'projects.images.localFile.birthTime'
  | 'projects.images.localFile.birthtime'
  | 'projects.images.localFile.birthtimeMs'
  | 'projects.images.localFile.blksize'
  | 'projects.images.localFile.blocks'
  | 'projects.images.localFile.changeTime'
  | 'projects.images.localFile.children'
  | 'projects.images.localFile.childrenImageSharp'
  | 'projects.images.localFile.ctime'
  | 'projects.images.localFile.ctimeMs'
  | 'projects.images.localFile.dev'
  | 'projects.images.localFile.dir'
  | 'projects.images.localFile.ext'
  | 'projects.images.localFile.extension'
  | 'projects.images.localFile.gid'
  | 'projects.images.localFile.id'
  | 'projects.images.localFile.ino'
  | 'projects.images.localFile.mode'
  | 'projects.images.localFile.modifiedTime'
  | 'projects.images.localFile.mtime'
  | 'projects.images.localFile.mtimeMs'
  | 'projects.images.localFile.name'
  | 'projects.images.localFile.nlink'
  | 'projects.images.localFile.prettySize'
  | 'projects.images.localFile.publicURL'
  | 'projects.images.localFile.rdev'
  | 'projects.images.localFile.relativeDirectory'
  | 'projects.images.localFile.relativePath'
  | 'projects.images.localFile.root'
  | 'projects.images.localFile.size'
  | 'projects.images.localFile.sourceInstanceName'
  | 'projects.images.localFile.uid'
  | 'projects.images.localFile.url'
  | 'projects.images.mime'
  | 'projects.images.name'
  | 'projects.images.parent.children'
  | 'projects.images.parent.id'
  | 'projects.images.size'
  | 'projects.images.strapi_id'
  | 'projects.images.updatedAt'
  | 'projects.images.url'
  | 'projects.images.width'
  | 'projects.internal.content'
  | 'projects.internal.contentDigest'
  | 'projects.internal.description'
  | 'projects.internal.fieldOwners'
  | 'projects.internal.ignoreType'
  | 'projects.internal.mediaType'
  | 'projects.internal.owner'
  | 'projects.internal.type'
  | 'projects.links'
  | 'projects.links.children'
  | 'projects.links.children.children'
  | 'projects.links.children.id'
  | 'projects.links.id'
  | 'projects.links.internal.content'
  | 'projects.links.internal.contentDigest'
  | 'projects.links.internal.description'
  | 'projects.links.internal.fieldOwners'
  | 'projects.links.internal.ignoreType'
  | 'projects.links.internal.mediaType'
  | 'projects.links.internal.owner'
  | 'projects.links.internal.type'
  | 'projects.links.label'
  | 'projects.links.link'
  | 'projects.links.parent.children'
  | 'projects.links.parent.id'
  | 'projects.links.strapi_id'
  | 'projects.name'
  | 'projects.organization.children'
  | 'projects.organization.children.children'
  | 'projects.organization.children.id'
  | 'projects.organization.createdAt'
  | 'projects.organization.id'
  | 'projects.organization.internal.content'
  | 'projects.organization.internal.contentDigest'
  | 'projects.organization.internal.description'
  | 'projects.organization.internal.fieldOwners'
  | 'projects.organization.internal.ignoreType'
  | 'projects.organization.internal.mediaType'
  | 'projects.organization.internal.owner'
  | 'projects.organization.internal.type'
  | 'projects.organization.link'
  | 'projects.organization.name'
  | 'projects.organization.parent.children'
  | 'projects.organization.parent.id'
  | 'projects.organization.projects'
  | 'projects.organization.projects.areas'
  | 'projects.organization.projects.children'
  | 'projects.organization.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.organization.projects.createdAt'
  | 'projects.organization.projects.id'
  | 'projects.organization.projects.images'
  | 'projects.organization.projects.links'
  | 'projects.organization.projects.name'
  | 'projects.organization.projects.publishedAt'
  | 'projects.organization.projects.slug'
  | 'projects.organization.projects.strapi_id'
  | 'projects.organization.projects.tags'
  | 'projects.organization.projects.title'
  | 'projects.organization.projects.updatedAt'
  | 'projects.organization.publishedAt'
  | 'projects.organization.strapi_id'
  | 'projects.organization.updatedAt'
  | 'projects.parent.children'
  | 'projects.parent.children.children'
  | 'projects.parent.children.id'
  | 'projects.parent.id'
  | 'projects.parent.internal.content'
  | 'projects.parent.internal.contentDigest'
  | 'projects.parent.internal.description'
  | 'projects.parent.internal.fieldOwners'
  | 'projects.parent.internal.ignoreType'
  | 'projects.parent.internal.mediaType'
  | 'projects.parent.internal.owner'
  | 'projects.parent.internal.type'
  | 'projects.parent.parent.children'
  | 'projects.parent.parent.id'
  | 'projects.publishedAt'
  | 'projects.slug'
  | 'projects.strapi_id'
  | 'projects.tags'
  | 'projects.tags.areas'
  | 'projects.tags.areas.children'
  | 'projects.tags.areas.color'
  | 'projects.tags.areas.createdAt'
  | 'projects.tags.areas.description'
  | 'projects.tags.areas.id'
  | 'projects.tags.areas.name'
  | 'projects.tags.areas.projects'
  | 'projects.tags.areas.publishedAt'
  | 'projects.tags.areas.slug'
  | 'projects.tags.areas.strapi_id'
  | 'projects.tags.areas.tags'
  | 'projects.tags.areas.updatedAt'
  | 'projects.tags.children'
  | 'projects.tags.children.children'
  | 'projects.tags.children.id'
  | 'projects.tags.createdAt'
  | 'projects.tags.id'
  | 'projects.tags.internal.content'
  | 'projects.tags.internal.contentDigest'
  | 'projects.tags.internal.description'
  | 'projects.tags.internal.fieldOwners'
  | 'projects.tags.internal.ignoreType'
  | 'projects.tags.internal.mediaType'
  | 'projects.tags.internal.owner'
  | 'projects.tags.internal.type'
  | 'projects.tags.name'
  | 'projects.tags.parent.children'
  | 'projects.tags.parent.id'
  | 'projects.tags.projects'
  | 'projects.tags.projects.areas'
  | 'projects.tags.projects.children'
  | 'projects.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.tags.projects.createdAt'
  | 'projects.tags.projects.id'
  | 'projects.tags.projects.images'
  | 'projects.tags.projects.links'
  | 'projects.tags.projects.name'
  | 'projects.tags.projects.publishedAt'
  | 'projects.tags.projects.slug'
  | 'projects.tags.projects.strapi_id'
  | 'projects.tags.projects.tags'
  | 'projects.tags.projects.title'
  | 'projects.tags.projects.updatedAt'
  | 'projects.tags.publishedAt'
  | 'projects.tags.strapi_id'
  | 'projects.tags.updatedAt'
  | 'projects.title'
  | 'projects.updatedAt'
  | 'publishedAt'
  | 'strapi_id'
  | 'updatedAt';

type STRAPI_ORGANIZATIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ORGANIZATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ORGANIZATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ORGANIZATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ORGANIZATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ORGANIZATIONGroupConnection_distinctArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONGroupConnection_groupArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ORGANIZATIONGroupConnection_maxArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONGroupConnection_minArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};


type STRAPI_ORGANIZATIONGroupConnection_sumArgs = {
  field: STRAPI_ORGANIZATIONFieldsEnum;
};

type STRAPI_ORGANIZATIONSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ORGANIZATIONFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_PROJECT = Node & {
  readonly areas: Maybe<ReadonlyArray<Maybe<STRAPI_AREA>>>;
  /** Returns the first child node of type STRAPI_PROJECT_DESCRIPTION_TEXTNODE or null if there are no children of given type on this node */
  readonly childStrapiProjectDescriptionTextnode: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type STRAPI_PROJECT_DESCRIPTION_TEXTNODE */
  readonly childrenStrapiProjectDescriptionTextnode: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>>>;
  readonly coverImage: Maybe<STRAPI__MEDIA>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_PROJECTDescription>;
  readonly id: Scalars['ID'];
  readonly images: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_SHARED_LINKS>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly organization: Maybe<STRAPI_ORGANIZATION>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<STRAPI_TAG>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_PROJECT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_PROJECTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECTEdge>;
  readonly group: ReadonlyArray<STRAPI_PROJECTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECTConnection_distinctArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTConnection_groupArgs = {
  field: STRAPI_PROJECTFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECTConnection_maxArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTConnection_minArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTConnection_sumArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};

type STRAPI_PROJECTDescription = {
  readonly data: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly medias: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECTDescriptionMedias>>>;
};

type STRAPI_PROJECTDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
  readonly medias: InputMaybe<STRAPI_PROJECTDescriptionMediasFilterListInput>;
};

type STRAPI_PROJECTDescriptionMedias = {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly file: Maybe<STRAPI_PROJECTDescriptionMediasFile>;
  readonly localFile: Maybe<File>;
  readonly src: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type STRAPI_PROJECTDescriptionMediasFile = {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI_PROJECTDescriptionMediasFileFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly provider: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI_PROJECTDescriptionMediasFile_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECTDescriptionMediasFile_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_PROJECTDescriptionMediasFileFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly provider: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFileFormats = {
  readonly large: Maybe<STRAPI_PROJECTDescriptionMediasFileFormatsLarge>;
  readonly medium: Maybe<STRAPI_PROJECTDescriptionMediasFileFormatsMedium>;
  readonly small: Maybe<STRAPI_PROJECTDescriptionMediasFileFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI_PROJECTDescriptionMediasFileFormatsThumbnail>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFormatsThumbnailFilterInput>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI_PROJECTDescriptionMediasFileFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly file: InputMaybe<STRAPI_PROJECTDescriptionMediasFileFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_PROJECTDescriptionMediasFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PROJECTDescriptionMediasFilterInput>;
};

type STRAPI_PROJECTEdge = {
  readonly next: Maybe<STRAPI_PROJECT>;
  readonly node: STRAPI_PROJECT;
  readonly previous: Maybe<STRAPI_PROJECT>;
};

type STRAPI_PROJECTFieldsEnum =
  | 'areas'
  | 'areas.children'
  | 'areas.children.children'
  | 'areas.children.children.children'
  | 'areas.children.children.id'
  | 'areas.children.id'
  | 'areas.children.internal.content'
  | 'areas.children.internal.contentDigest'
  | 'areas.children.internal.description'
  | 'areas.children.internal.fieldOwners'
  | 'areas.children.internal.ignoreType'
  | 'areas.children.internal.mediaType'
  | 'areas.children.internal.owner'
  | 'areas.children.internal.type'
  | 'areas.children.parent.children'
  | 'areas.children.parent.id'
  | 'areas.color'
  | 'areas.createdAt'
  | 'areas.description'
  | 'areas.id'
  | 'areas.internal.content'
  | 'areas.internal.contentDigest'
  | 'areas.internal.description'
  | 'areas.internal.fieldOwners'
  | 'areas.internal.ignoreType'
  | 'areas.internal.mediaType'
  | 'areas.internal.owner'
  | 'areas.internal.type'
  | 'areas.name'
  | 'areas.parent.children'
  | 'areas.parent.children.children'
  | 'areas.parent.children.id'
  | 'areas.parent.id'
  | 'areas.parent.internal.content'
  | 'areas.parent.internal.contentDigest'
  | 'areas.parent.internal.description'
  | 'areas.parent.internal.fieldOwners'
  | 'areas.parent.internal.ignoreType'
  | 'areas.parent.internal.mediaType'
  | 'areas.parent.internal.owner'
  | 'areas.parent.internal.type'
  | 'areas.parent.parent.children'
  | 'areas.parent.parent.id'
  | 'areas.projects'
  | 'areas.projects.areas'
  | 'areas.projects.areas.children'
  | 'areas.projects.areas.color'
  | 'areas.projects.areas.createdAt'
  | 'areas.projects.areas.description'
  | 'areas.projects.areas.id'
  | 'areas.projects.areas.name'
  | 'areas.projects.areas.projects'
  | 'areas.projects.areas.publishedAt'
  | 'areas.projects.areas.slug'
  | 'areas.projects.areas.strapi_id'
  | 'areas.projects.areas.tags'
  | 'areas.projects.areas.updatedAt'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children.children'
  | 'areas.projects.children.id'
  | 'areas.projects.coverImage.alternativeText'
  | 'areas.projects.coverImage.caption'
  | 'areas.projects.coverImage.children'
  | 'areas.projects.coverImage.createdAt'
  | 'areas.projects.coverImage.ext'
  | 'areas.projects.coverImage.hash'
  | 'areas.projects.coverImage.height'
  | 'areas.projects.coverImage.id'
  | 'areas.projects.coverImage.mime'
  | 'areas.projects.coverImage.name'
  | 'areas.projects.coverImage.size'
  | 'areas.projects.coverImage.strapi_id'
  | 'areas.projects.coverImage.updatedAt'
  | 'areas.projects.coverImage.url'
  | 'areas.projects.coverImage.width'
  | 'areas.projects.createdAt'
  | 'areas.projects.description.medias'
  | 'areas.projects.id'
  | 'areas.projects.images'
  | 'areas.projects.images.alternativeText'
  | 'areas.projects.images.caption'
  | 'areas.projects.images.children'
  | 'areas.projects.images.createdAt'
  | 'areas.projects.images.ext'
  | 'areas.projects.images.hash'
  | 'areas.projects.images.height'
  | 'areas.projects.images.id'
  | 'areas.projects.images.mime'
  | 'areas.projects.images.name'
  | 'areas.projects.images.size'
  | 'areas.projects.images.strapi_id'
  | 'areas.projects.images.updatedAt'
  | 'areas.projects.images.url'
  | 'areas.projects.images.width'
  | 'areas.projects.internal.content'
  | 'areas.projects.internal.contentDigest'
  | 'areas.projects.internal.description'
  | 'areas.projects.internal.fieldOwners'
  | 'areas.projects.internal.ignoreType'
  | 'areas.projects.internal.mediaType'
  | 'areas.projects.internal.owner'
  | 'areas.projects.internal.type'
  | 'areas.projects.links'
  | 'areas.projects.links.children'
  | 'areas.projects.links.id'
  | 'areas.projects.links.label'
  | 'areas.projects.links.link'
  | 'areas.projects.links.strapi_id'
  | 'areas.projects.name'
  | 'areas.projects.organization.children'
  | 'areas.projects.organization.createdAt'
  | 'areas.projects.organization.id'
  | 'areas.projects.organization.link'
  | 'areas.projects.organization.name'
  | 'areas.projects.organization.projects'
  | 'areas.projects.organization.publishedAt'
  | 'areas.projects.organization.strapi_id'
  | 'areas.projects.organization.updatedAt'
  | 'areas.projects.parent.children'
  | 'areas.projects.parent.id'
  | 'areas.projects.publishedAt'
  | 'areas.projects.slug'
  | 'areas.projects.strapi_id'
  | 'areas.projects.tags'
  | 'areas.projects.tags.areas'
  | 'areas.projects.tags.children'
  | 'areas.projects.tags.createdAt'
  | 'areas.projects.tags.id'
  | 'areas.projects.tags.name'
  | 'areas.projects.tags.projects'
  | 'areas.projects.tags.publishedAt'
  | 'areas.projects.tags.strapi_id'
  | 'areas.projects.tags.updatedAt'
  | 'areas.projects.title'
  | 'areas.projects.updatedAt'
  | 'areas.publishedAt'
  | 'areas.slug'
  | 'areas.strapi_id'
  | 'areas.tags'
  | 'areas.tags.areas'
  | 'areas.tags.areas.children'
  | 'areas.tags.areas.color'
  | 'areas.tags.areas.createdAt'
  | 'areas.tags.areas.description'
  | 'areas.tags.areas.id'
  | 'areas.tags.areas.name'
  | 'areas.tags.areas.projects'
  | 'areas.tags.areas.publishedAt'
  | 'areas.tags.areas.slug'
  | 'areas.tags.areas.strapi_id'
  | 'areas.tags.areas.tags'
  | 'areas.tags.areas.updatedAt'
  | 'areas.tags.children'
  | 'areas.tags.children.children'
  | 'areas.tags.children.id'
  | 'areas.tags.createdAt'
  | 'areas.tags.id'
  | 'areas.tags.internal.content'
  | 'areas.tags.internal.contentDigest'
  | 'areas.tags.internal.description'
  | 'areas.tags.internal.fieldOwners'
  | 'areas.tags.internal.ignoreType'
  | 'areas.tags.internal.mediaType'
  | 'areas.tags.internal.owner'
  | 'areas.tags.internal.type'
  | 'areas.tags.name'
  | 'areas.tags.parent.children'
  | 'areas.tags.parent.id'
  | 'areas.tags.projects'
  | 'areas.tags.projects.areas'
  | 'areas.tags.projects.children'
  | 'areas.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.tags.projects.createdAt'
  | 'areas.tags.projects.id'
  | 'areas.tags.projects.images'
  | 'areas.tags.projects.links'
  | 'areas.tags.projects.name'
  | 'areas.tags.projects.publishedAt'
  | 'areas.tags.projects.slug'
  | 'areas.tags.projects.strapi_id'
  | 'areas.tags.projects.tags'
  | 'areas.tags.projects.title'
  | 'areas.tags.projects.updatedAt'
  | 'areas.tags.publishedAt'
  | 'areas.tags.strapi_id'
  | 'areas.tags.updatedAt'
  | 'areas.updatedAt'
  | 'childStrapiProjectDescriptionTextnode.children'
  | 'childStrapiProjectDescriptionTextnode.children.children'
  | 'childStrapiProjectDescriptionTextnode.children.children.children'
  | 'childStrapiProjectDescriptionTextnode.children.children.id'
  | 'childStrapiProjectDescriptionTextnode.children.id'
  | 'childStrapiProjectDescriptionTextnode.children.internal.content'
  | 'childStrapiProjectDescriptionTextnode.children.internal.contentDigest'
  | 'childStrapiProjectDescriptionTextnode.children.internal.description'
  | 'childStrapiProjectDescriptionTextnode.children.internal.fieldOwners'
  | 'childStrapiProjectDescriptionTextnode.children.internal.ignoreType'
  | 'childStrapiProjectDescriptionTextnode.children.internal.mediaType'
  | 'childStrapiProjectDescriptionTextnode.children.internal.owner'
  | 'childStrapiProjectDescriptionTextnode.children.internal.type'
  | 'childStrapiProjectDescriptionTextnode.children.parent.children'
  | 'childStrapiProjectDescriptionTextnode.children.parent.id'
  | 'childStrapiProjectDescriptionTextnode.description'
  | 'childStrapiProjectDescriptionTextnode.id'
  | 'childStrapiProjectDescriptionTextnode.internal.content'
  | 'childStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'childStrapiProjectDescriptionTextnode.internal.description'
  | 'childStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'childStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'childStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'childStrapiProjectDescriptionTextnode.internal.owner'
  | 'childStrapiProjectDescriptionTextnode.internal.type'
  | 'childStrapiProjectDescriptionTextnode.parent.children'
  | 'childStrapiProjectDescriptionTextnode.parent.children.children'
  | 'childStrapiProjectDescriptionTextnode.parent.children.id'
  | 'childStrapiProjectDescriptionTextnode.parent.id'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.content'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.contentDigest'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.description'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.fieldOwners'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.ignoreType'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.mediaType'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.owner'
  | 'childStrapiProjectDescriptionTextnode.parent.internal.type'
  | 'childStrapiProjectDescriptionTextnode.parent.parent.children'
  | 'childStrapiProjectDescriptionTextnode.parent.parent.id'
  | 'children'
  | 'childrenStrapiProjectDescriptionTextnode'
  | 'childrenStrapiProjectDescriptionTextnode.children'
  | 'childrenStrapiProjectDescriptionTextnode.children.children'
  | 'childrenStrapiProjectDescriptionTextnode.children.children.children'
  | 'childrenStrapiProjectDescriptionTextnode.children.children.id'
  | 'childrenStrapiProjectDescriptionTextnode.children.id'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.content'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.contentDigest'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.description'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.fieldOwners'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.ignoreType'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.mediaType'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.owner'
  | 'childrenStrapiProjectDescriptionTextnode.children.internal.type'
  | 'childrenStrapiProjectDescriptionTextnode.children.parent.children'
  | 'childrenStrapiProjectDescriptionTextnode.children.parent.id'
  | 'childrenStrapiProjectDescriptionTextnode.description'
  | 'childrenStrapiProjectDescriptionTextnode.id'
  | 'childrenStrapiProjectDescriptionTextnode.internal.content'
  | 'childrenStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'childrenStrapiProjectDescriptionTextnode.internal.description'
  | 'childrenStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'childrenStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'childrenStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'childrenStrapiProjectDescriptionTextnode.internal.owner'
  | 'childrenStrapiProjectDescriptionTextnode.internal.type'
  | 'childrenStrapiProjectDescriptionTextnode.parent.children'
  | 'childrenStrapiProjectDescriptionTextnode.parent.children.children'
  | 'childrenStrapiProjectDescriptionTextnode.parent.children.id'
  | 'childrenStrapiProjectDescriptionTextnode.parent.id'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.content'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.contentDigest'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.description'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.fieldOwners'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.ignoreType'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.mediaType'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.owner'
  | 'childrenStrapiProjectDescriptionTextnode.parent.internal.type'
  | 'childrenStrapiProjectDescriptionTextnode.parent.parent.children'
  | 'childrenStrapiProjectDescriptionTextnode.parent.parent.id'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'coverImage.alternativeText'
  | 'coverImage.caption'
  | 'coverImage.children'
  | 'coverImage.children.children'
  | 'coverImage.children.children.children'
  | 'coverImage.children.children.id'
  | 'coverImage.children.id'
  | 'coverImage.children.internal.content'
  | 'coverImage.children.internal.contentDigest'
  | 'coverImage.children.internal.description'
  | 'coverImage.children.internal.fieldOwners'
  | 'coverImage.children.internal.ignoreType'
  | 'coverImage.children.internal.mediaType'
  | 'coverImage.children.internal.owner'
  | 'coverImage.children.internal.type'
  | 'coverImage.children.parent.children'
  | 'coverImage.children.parent.id'
  | 'coverImage.createdAt'
  | 'coverImage.ext'
  | 'coverImage.formats.large.ext'
  | 'coverImage.formats.large.hash'
  | 'coverImage.formats.large.height'
  | 'coverImage.formats.large.mime'
  | 'coverImage.formats.large.name'
  | 'coverImage.formats.large.size'
  | 'coverImage.formats.large.url'
  | 'coverImage.formats.large.width'
  | 'coverImage.formats.medium.ext'
  | 'coverImage.formats.medium.hash'
  | 'coverImage.formats.medium.height'
  | 'coverImage.formats.medium.mime'
  | 'coverImage.formats.medium.name'
  | 'coverImage.formats.medium.size'
  | 'coverImage.formats.medium.url'
  | 'coverImage.formats.medium.width'
  | 'coverImage.formats.small.ext'
  | 'coverImage.formats.small.hash'
  | 'coverImage.formats.small.height'
  | 'coverImage.formats.small.mime'
  | 'coverImage.formats.small.name'
  | 'coverImage.formats.small.size'
  | 'coverImage.formats.small.url'
  | 'coverImage.formats.small.width'
  | 'coverImage.formats.thumbnail.ext'
  | 'coverImage.formats.thumbnail.hash'
  | 'coverImage.formats.thumbnail.height'
  | 'coverImage.formats.thumbnail.mime'
  | 'coverImage.formats.thumbnail.name'
  | 'coverImage.formats.thumbnail.size'
  | 'coverImage.formats.thumbnail.url'
  | 'coverImage.formats.thumbnail.width'
  | 'coverImage.hash'
  | 'coverImage.height'
  | 'coverImage.id'
  | 'coverImage.internal.content'
  | 'coverImage.internal.contentDigest'
  | 'coverImage.internal.description'
  | 'coverImage.internal.fieldOwners'
  | 'coverImage.internal.ignoreType'
  | 'coverImage.internal.mediaType'
  | 'coverImage.internal.owner'
  | 'coverImage.internal.type'
  | 'coverImage.localFile.absolutePath'
  | 'coverImage.localFile.accessTime'
  | 'coverImage.localFile.atime'
  | 'coverImage.localFile.atimeMs'
  | 'coverImage.localFile.base'
  | 'coverImage.localFile.birthTime'
  | 'coverImage.localFile.birthtime'
  | 'coverImage.localFile.birthtimeMs'
  | 'coverImage.localFile.blksize'
  | 'coverImage.localFile.blocks'
  | 'coverImage.localFile.changeTime'
  | 'coverImage.localFile.childImageSharp.children'
  | 'coverImage.localFile.childImageSharp.gatsbyImageData'
  | 'coverImage.localFile.childImageSharp.id'
  | 'coverImage.localFile.children'
  | 'coverImage.localFile.childrenImageSharp'
  | 'coverImage.localFile.childrenImageSharp.children'
  | 'coverImage.localFile.childrenImageSharp.gatsbyImageData'
  | 'coverImage.localFile.childrenImageSharp.id'
  | 'coverImage.localFile.children.children'
  | 'coverImage.localFile.children.id'
  | 'coverImage.localFile.ctime'
  | 'coverImage.localFile.ctimeMs'
  | 'coverImage.localFile.dev'
  | 'coverImage.localFile.dir'
  | 'coverImage.localFile.ext'
  | 'coverImage.localFile.extension'
  | 'coverImage.localFile.gid'
  | 'coverImage.localFile.id'
  | 'coverImage.localFile.ino'
  | 'coverImage.localFile.internal.content'
  | 'coverImage.localFile.internal.contentDigest'
  | 'coverImage.localFile.internal.description'
  | 'coverImage.localFile.internal.fieldOwners'
  | 'coverImage.localFile.internal.ignoreType'
  | 'coverImage.localFile.internal.mediaType'
  | 'coverImage.localFile.internal.owner'
  | 'coverImage.localFile.internal.type'
  | 'coverImage.localFile.mode'
  | 'coverImage.localFile.modifiedTime'
  | 'coverImage.localFile.mtime'
  | 'coverImage.localFile.mtimeMs'
  | 'coverImage.localFile.name'
  | 'coverImage.localFile.nlink'
  | 'coverImage.localFile.parent.children'
  | 'coverImage.localFile.parent.id'
  | 'coverImage.localFile.prettySize'
  | 'coverImage.localFile.publicURL'
  | 'coverImage.localFile.rdev'
  | 'coverImage.localFile.relativeDirectory'
  | 'coverImage.localFile.relativePath'
  | 'coverImage.localFile.root'
  | 'coverImage.localFile.size'
  | 'coverImage.localFile.sourceInstanceName'
  | 'coverImage.localFile.uid'
  | 'coverImage.localFile.url'
  | 'coverImage.mime'
  | 'coverImage.name'
  | 'coverImage.parent.children'
  | 'coverImage.parent.children.children'
  | 'coverImage.parent.children.id'
  | 'coverImage.parent.id'
  | 'coverImage.parent.internal.content'
  | 'coverImage.parent.internal.contentDigest'
  | 'coverImage.parent.internal.description'
  | 'coverImage.parent.internal.fieldOwners'
  | 'coverImage.parent.internal.ignoreType'
  | 'coverImage.parent.internal.mediaType'
  | 'coverImage.parent.internal.owner'
  | 'coverImage.parent.internal.type'
  | 'coverImage.parent.parent.children'
  | 'coverImage.parent.parent.id'
  | 'coverImage.size'
  | 'coverImage.strapi_id'
  | 'coverImage.updatedAt'
  | 'coverImage.url'
  | 'coverImage.width'
  | 'createdAt'
  | 'description.data.children'
  | 'description.data.children.children'
  | 'description.data.children.id'
  | 'description.data.description'
  | 'description.data.id'
  | 'description.data.internal.content'
  | 'description.data.internal.contentDigest'
  | 'description.data.internal.description'
  | 'description.data.internal.fieldOwners'
  | 'description.data.internal.ignoreType'
  | 'description.data.internal.mediaType'
  | 'description.data.internal.owner'
  | 'description.data.internal.type'
  | 'description.data.parent.children'
  | 'description.data.parent.id'
  | 'description.medias'
  | 'description.medias.alternativeText'
  | 'description.medias.file.alternativeText'
  | 'description.medias.file.caption'
  | 'description.medias.file.createdAt'
  | 'description.medias.file.ext'
  | 'description.medias.file.hash'
  | 'description.medias.file.height'
  | 'description.medias.file.id'
  | 'description.medias.file.mime'
  | 'description.medias.file.name'
  | 'description.medias.file.provider'
  | 'description.medias.file.size'
  | 'description.medias.file.updatedAt'
  | 'description.medias.file.url'
  | 'description.medias.file.width'
  | 'description.medias.localFile.absolutePath'
  | 'description.medias.localFile.accessTime'
  | 'description.medias.localFile.atime'
  | 'description.medias.localFile.atimeMs'
  | 'description.medias.localFile.base'
  | 'description.medias.localFile.birthTime'
  | 'description.medias.localFile.birthtime'
  | 'description.medias.localFile.birthtimeMs'
  | 'description.medias.localFile.blksize'
  | 'description.medias.localFile.blocks'
  | 'description.medias.localFile.changeTime'
  | 'description.medias.localFile.children'
  | 'description.medias.localFile.childrenImageSharp'
  | 'description.medias.localFile.ctime'
  | 'description.medias.localFile.ctimeMs'
  | 'description.medias.localFile.dev'
  | 'description.medias.localFile.dir'
  | 'description.medias.localFile.ext'
  | 'description.medias.localFile.extension'
  | 'description.medias.localFile.gid'
  | 'description.medias.localFile.id'
  | 'description.medias.localFile.ino'
  | 'description.medias.localFile.mode'
  | 'description.medias.localFile.modifiedTime'
  | 'description.medias.localFile.mtime'
  | 'description.medias.localFile.mtimeMs'
  | 'description.medias.localFile.name'
  | 'description.medias.localFile.nlink'
  | 'description.medias.localFile.prettySize'
  | 'description.medias.localFile.publicURL'
  | 'description.medias.localFile.rdev'
  | 'description.medias.localFile.relativeDirectory'
  | 'description.medias.localFile.relativePath'
  | 'description.medias.localFile.root'
  | 'description.medias.localFile.size'
  | 'description.medias.localFile.sourceInstanceName'
  | 'description.medias.localFile.uid'
  | 'description.medias.localFile.url'
  | 'description.medias.src'
  | 'description.medias.url'
  | 'id'
  | 'images'
  | 'images.alternativeText'
  | 'images.caption'
  | 'images.children'
  | 'images.children.children'
  | 'images.children.children.children'
  | 'images.children.children.id'
  | 'images.children.id'
  | 'images.children.internal.content'
  | 'images.children.internal.contentDigest'
  | 'images.children.internal.description'
  | 'images.children.internal.fieldOwners'
  | 'images.children.internal.ignoreType'
  | 'images.children.internal.mediaType'
  | 'images.children.internal.owner'
  | 'images.children.internal.type'
  | 'images.children.parent.children'
  | 'images.children.parent.id'
  | 'images.createdAt'
  | 'images.ext'
  | 'images.formats.large.ext'
  | 'images.formats.large.hash'
  | 'images.formats.large.height'
  | 'images.formats.large.mime'
  | 'images.formats.large.name'
  | 'images.formats.large.size'
  | 'images.formats.large.url'
  | 'images.formats.large.width'
  | 'images.formats.medium.ext'
  | 'images.formats.medium.hash'
  | 'images.formats.medium.height'
  | 'images.formats.medium.mime'
  | 'images.formats.medium.name'
  | 'images.formats.medium.size'
  | 'images.formats.medium.url'
  | 'images.formats.medium.width'
  | 'images.formats.small.ext'
  | 'images.formats.small.hash'
  | 'images.formats.small.height'
  | 'images.formats.small.mime'
  | 'images.formats.small.name'
  | 'images.formats.small.size'
  | 'images.formats.small.url'
  | 'images.formats.small.width'
  | 'images.formats.thumbnail.ext'
  | 'images.formats.thumbnail.hash'
  | 'images.formats.thumbnail.height'
  | 'images.formats.thumbnail.mime'
  | 'images.formats.thumbnail.name'
  | 'images.formats.thumbnail.size'
  | 'images.formats.thumbnail.url'
  | 'images.formats.thumbnail.width'
  | 'images.hash'
  | 'images.height'
  | 'images.id'
  | 'images.internal.content'
  | 'images.internal.contentDigest'
  | 'images.internal.description'
  | 'images.internal.fieldOwners'
  | 'images.internal.ignoreType'
  | 'images.internal.mediaType'
  | 'images.internal.owner'
  | 'images.internal.type'
  | 'images.localFile.absolutePath'
  | 'images.localFile.accessTime'
  | 'images.localFile.atime'
  | 'images.localFile.atimeMs'
  | 'images.localFile.base'
  | 'images.localFile.birthTime'
  | 'images.localFile.birthtime'
  | 'images.localFile.birthtimeMs'
  | 'images.localFile.blksize'
  | 'images.localFile.blocks'
  | 'images.localFile.changeTime'
  | 'images.localFile.childImageSharp.children'
  | 'images.localFile.childImageSharp.gatsbyImageData'
  | 'images.localFile.childImageSharp.id'
  | 'images.localFile.children'
  | 'images.localFile.childrenImageSharp'
  | 'images.localFile.childrenImageSharp.children'
  | 'images.localFile.childrenImageSharp.gatsbyImageData'
  | 'images.localFile.childrenImageSharp.id'
  | 'images.localFile.children.children'
  | 'images.localFile.children.id'
  | 'images.localFile.ctime'
  | 'images.localFile.ctimeMs'
  | 'images.localFile.dev'
  | 'images.localFile.dir'
  | 'images.localFile.ext'
  | 'images.localFile.extension'
  | 'images.localFile.gid'
  | 'images.localFile.id'
  | 'images.localFile.ino'
  | 'images.localFile.internal.content'
  | 'images.localFile.internal.contentDigest'
  | 'images.localFile.internal.description'
  | 'images.localFile.internal.fieldOwners'
  | 'images.localFile.internal.ignoreType'
  | 'images.localFile.internal.mediaType'
  | 'images.localFile.internal.owner'
  | 'images.localFile.internal.type'
  | 'images.localFile.mode'
  | 'images.localFile.modifiedTime'
  | 'images.localFile.mtime'
  | 'images.localFile.mtimeMs'
  | 'images.localFile.name'
  | 'images.localFile.nlink'
  | 'images.localFile.parent.children'
  | 'images.localFile.parent.id'
  | 'images.localFile.prettySize'
  | 'images.localFile.publicURL'
  | 'images.localFile.rdev'
  | 'images.localFile.relativeDirectory'
  | 'images.localFile.relativePath'
  | 'images.localFile.root'
  | 'images.localFile.size'
  | 'images.localFile.sourceInstanceName'
  | 'images.localFile.uid'
  | 'images.localFile.url'
  | 'images.mime'
  | 'images.name'
  | 'images.parent.children'
  | 'images.parent.children.children'
  | 'images.parent.children.id'
  | 'images.parent.id'
  | 'images.parent.internal.content'
  | 'images.parent.internal.contentDigest'
  | 'images.parent.internal.description'
  | 'images.parent.internal.fieldOwners'
  | 'images.parent.internal.ignoreType'
  | 'images.parent.internal.mediaType'
  | 'images.parent.internal.owner'
  | 'images.parent.internal.type'
  | 'images.parent.parent.children'
  | 'images.parent.parent.id'
  | 'images.size'
  | 'images.strapi_id'
  | 'images.updatedAt'
  | 'images.url'
  | 'images.width'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'links'
  | 'links.children'
  | 'links.children.children'
  | 'links.children.children.children'
  | 'links.children.children.id'
  | 'links.children.id'
  | 'links.children.internal.content'
  | 'links.children.internal.contentDigest'
  | 'links.children.internal.description'
  | 'links.children.internal.fieldOwners'
  | 'links.children.internal.ignoreType'
  | 'links.children.internal.mediaType'
  | 'links.children.internal.owner'
  | 'links.children.internal.type'
  | 'links.children.parent.children'
  | 'links.children.parent.id'
  | 'links.id'
  | 'links.internal.content'
  | 'links.internal.contentDigest'
  | 'links.internal.description'
  | 'links.internal.fieldOwners'
  | 'links.internal.ignoreType'
  | 'links.internal.mediaType'
  | 'links.internal.owner'
  | 'links.internal.type'
  | 'links.label'
  | 'links.link'
  | 'links.parent.children'
  | 'links.parent.children.children'
  | 'links.parent.children.id'
  | 'links.parent.id'
  | 'links.parent.internal.content'
  | 'links.parent.internal.contentDigest'
  | 'links.parent.internal.description'
  | 'links.parent.internal.fieldOwners'
  | 'links.parent.internal.ignoreType'
  | 'links.parent.internal.mediaType'
  | 'links.parent.internal.owner'
  | 'links.parent.internal.type'
  | 'links.parent.parent.children'
  | 'links.parent.parent.id'
  | 'links.strapi_id'
  | 'name'
  | 'organization.children'
  | 'organization.children.children'
  | 'organization.children.children.children'
  | 'organization.children.children.id'
  | 'organization.children.id'
  | 'organization.children.internal.content'
  | 'organization.children.internal.contentDigest'
  | 'organization.children.internal.description'
  | 'organization.children.internal.fieldOwners'
  | 'organization.children.internal.ignoreType'
  | 'organization.children.internal.mediaType'
  | 'organization.children.internal.owner'
  | 'organization.children.internal.type'
  | 'organization.children.parent.children'
  | 'organization.children.parent.id'
  | 'organization.createdAt'
  | 'organization.id'
  | 'organization.internal.content'
  | 'organization.internal.contentDigest'
  | 'organization.internal.description'
  | 'organization.internal.fieldOwners'
  | 'organization.internal.ignoreType'
  | 'organization.internal.mediaType'
  | 'organization.internal.owner'
  | 'organization.internal.type'
  | 'organization.link'
  | 'organization.name'
  | 'organization.parent.children'
  | 'organization.parent.children.children'
  | 'organization.parent.children.id'
  | 'organization.parent.id'
  | 'organization.parent.internal.content'
  | 'organization.parent.internal.contentDigest'
  | 'organization.parent.internal.description'
  | 'organization.parent.internal.fieldOwners'
  | 'organization.parent.internal.ignoreType'
  | 'organization.parent.internal.mediaType'
  | 'organization.parent.internal.owner'
  | 'organization.parent.internal.type'
  | 'organization.parent.parent.children'
  | 'organization.parent.parent.id'
  | 'organization.projects'
  | 'organization.projects.areas'
  | 'organization.projects.areas.children'
  | 'organization.projects.areas.color'
  | 'organization.projects.areas.createdAt'
  | 'organization.projects.areas.description'
  | 'organization.projects.areas.id'
  | 'organization.projects.areas.name'
  | 'organization.projects.areas.projects'
  | 'organization.projects.areas.publishedAt'
  | 'organization.projects.areas.slug'
  | 'organization.projects.areas.strapi_id'
  | 'organization.projects.areas.tags'
  | 'organization.projects.areas.updatedAt'
  | 'organization.projects.childStrapiProjectDescriptionTextnode.children'
  | 'organization.projects.childStrapiProjectDescriptionTextnode.description'
  | 'organization.projects.childStrapiProjectDescriptionTextnode.id'
  | 'organization.projects.children'
  | 'organization.projects.childrenStrapiProjectDescriptionTextnode'
  | 'organization.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'organization.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'organization.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'organization.projects.children.children'
  | 'organization.projects.children.id'
  | 'organization.projects.coverImage.alternativeText'
  | 'organization.projects.coverImage.caption'
  | 'organization.projects.coverImage.children'
  | 'organization.projects.coverImage.createdAt'
  | 'organization.projects.coverImage.ext'
  | 'organization.projects.coverImage.hash'
  | 'organization.projects.coverImage.height'
  | 'organization.projects.coverImage.id'
  | 'organization.projects.coverImage.mime'
  | 'organization.projects.coverImage.name'
  | 'organization.projects.coverImage.size'
  | 'organization.projects.coverImage.strapi_id'
  | 'organization.projects.coverImage.updatedAt'
  | 'organization.projects.coverImage.url'
  | 'organization.projects.coverImage.width'
  | 'organization.projects.createdAt'
  | 'organization.projects.description.medias'
  | 'organization.projects.id'
  | 'organization.projects.images'
  | 'organization.projects.images.alternativeText'
  | 'organization.projects.images.caption'
  | 'organization.projects.images.children'
  | 'organization.projects.images.createdAt'
  | 'organization.projects.images.ext'
  | 'organization.projects.images.hash'
  | 'organization.projects.images.height'
  | 'organization.projects.images.id'
  | 'organization.projects.images.mime'
  | 'organization.projects.images.name'
  | 'organization.projects.images.size'
  | 'organization.projects.images.strapi_id'
  | 'organization.projects.images.updatedAt'
  | 'organization.projects.images.url'
  | 'organization.projects.images.width'
  | 'organization.projects.internal.content'
  | 'organization.projects.internal.contentDigest'
  | 'organization.projects.internal.description'
  | 'organization.projects.internal.fieldOwners'
  | 'organization.projects.internal.ignoreType'
  | 'organization.projects.internal.mediaType'
  | 'organization.projects.internal.owner'
  | 'organization.projects.internal.type'
  | 'organization.projects.links'
  | 'organization.projects.links.children'
  | 'organization.projects.links.id'
  | 'organization.projects.links.label'
  | 'organization.projects.links.link'
  | 'organization.projects.links.strapi_id'
  | 'organization.projects.name'
  | 'organization.projects.organization.children'
  | 'organization.projects.organization.createdAt'
  | 'organization.projects.organization.id'
  | 'organization.projects.organization.link'
  | 'organization.projects.organization.name'
  | 'organization.projects.organization.projects'
  | 'organization.projects.organization.publishedAt'
  | 'organization.projects.organization.strapi_id'
  | 'organization.projects.organization.updatedAt'
  | 'organization.projects.parent.children'
  | 'organization.projects.parent.id'
  | 'organization.projects.publishedAt'
  | 'organization.projects.slug'
  | 'organization.projects.strapi_id'
  | 'organization.projects.tags'
  | 'organization.projects.tags.areas'
  | 'organization.projects.tags.children'
  | 'organization.projects.tags.createdAt'
  | 'organization.projects.tags.id'
  | 'organization.projects.tags.name'
  | 'organization.projects.tags.projects'
  | 'organization.projects.tags.publishedAt'
  | 'organization.projects.tags.strapi_id'
  | 'organization.projects.tags.updatedAt'
  | 'organization.projects.title'
  | 'organization.projects.updatedAt'
  | 'organization.publishedAt'
  | 'organization.strapi_id'
  | 'organization.updatedAt'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publishedAt'
  | 'slug'
  | 'strapi_id'
  | 'tags'
  | 'tags.areas'
  | 'tags.areas.children'
  | 'tags.areas.children.children'
  | 'tags.areas.children.id'
  | 'tags.areas.color'
  | 'tags.areas.createdAt'
  | 'tags.areas.description'
  | 'tags.areas.id'
  | 'tags.areas.internal.content'
  | 'tags.areas.internal.contentDigest'
  | 'tags.areas.internal.description'
  | 'tags.areas.internal.fieldOwners'
  | 'tags.areas.internal.ignoreType'
  | 'tags.areas.internal.mediaType'
  | 'tags.areas.internal.owner'
  | 'tags.areas.internal.type'
  | 'tags.areas.name'
  | 'tags.areas.parent.children'
  | 'tags.areas.parent.id'
  | 'tags.areas.projects'
  | 'tags.areas.projects.areas'
  | 'tags.areas.projects.children'
  | 'tags.areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'tags.areas.projects.createdAt'
  | 'tags.areas.projects.id'
  | 'tags.areas.projects.images'
  | 'tags.areas.projects.links'
  | 'tags.areas.projects.name'
  | 'tags.areas.projects.publishedAt'
  | 'tags.areas.projects.slug'
  | 'tags.areas.projects.strapi_id'
  | 'tags.areas.projects.tags'
  | 'tags.areas.projects.title'
  | 'tags.areas.projects.updatedAt'
  | 'tags.areas.publishedAt'
  | 'tags.areas.slug'
  | 'tags.areas.strapi_id'
  | 'tags.areas.tags'
  | 'tags.areas.tags.areas'
  | 'tags.areas.tags.children'
  | 'tags.areas.tags.createdAt'
  | 'tags.areas.tags.id'
  | 'tags.areas.tags.name'
  | 'tags.areas.tags.projects'
  | 'tags.areas.tags.publishedAt'
  | 'tags.areas.tags.strapi_id'
  | 'tags.areas.tags.updatedAt'
  | 'tags.areas.updatedAt'
  | 'tags.children'
  | 'tags.children.children'
  | 'tags.children.children.children'
  | 'tags.children.children.id'
  | 'tags.children.id'
  | 'tags.children.internal.content'
  | 'tags.children.internal.contentDigest'
  | 'tags.children.internal.description'
  | 'tags.children.internal.fieldOwners'
  | 'tags.children.internal.ignoreType'
  | 'tags.children.internal.mediaType'
  | 'tags.children.internal.owner'
  | 'tags.children.internal.type'
  | 'tags.children.parent.children'
  | 'tags.children.parent.id'
  | 'tags.createdAt'
  | 'tags.id'
  | 'tags.internal.content'
  | 'tags.internal.contentDigest'
  | 'tags.internal.description'
  | 'tags.internal.fieldOwners'
  | 'tags.internal.ignoreType'
  | 'tags.internal.mediaType'
  | 'tags.internal.owner'
  | 'tags.internal.type'
  | 'tags.name'
  | 'tags.parent.children'
  | 'tags.parent.children.children'
  | 'tags.parent.children.id'
  | 'tags.parent.id'
  | 'tags.parent.internal.content'
  | 'tags.parent.internal.contentDigest'
  | 'tags.parent.internal.description'
  | 'tags.parent.internal.fieldOwners'
  | 'tags.parent.internal.ignoreType'
  | 'tags.parent.internal.mediaType'
  | 'tags.parent.internal.owner'
  | 'tags.parent.internal.type'
  | 'tags.parent.parent.children'
  | 'tags.parent.parent.id'
  | 'tags.projects'
  | 'tags.projects.areas'
  | 'tags.projects.areas.children'
  | 'tags.projects.areas.color'
  | 'tags.projects.areas.createdAt'
  | 'tags.projects.areas.description'
  | 'tags.projects.areas.id'
  | 'tags.projects.areas.name'
  | 'tags.projects.areas.projects'
  | 'tags.projects.areas.publishedAt'
  | 'tags.projects.areas.slug'
  | 'tags.projects.areas.strapi_id'
  | 'tags.projects.areas.tags'
  | 'tags.projects.areas.updatedAt'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.children'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.description'
  | 'tags.projects.childStrapiProjectDescriptionTextnode.id'
  | 'tags.projects.children'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'tags.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'tags.projects.children.children'
  | 'tags.projects.children.id'
  | 'tags.projects.coverImage.alternativeText'
  | 'tags.projects.coverImage.caption'
  | 'tags.projects.coverImage.children'
  | 'tags.projects.coverImage.createdAt'
  | 'tags.projects.coverImage.ext'
  | 'tags.projects.coverImage.hash'
  | 'tags.projects.coverImage.height'
  | 'tags.projects.coverImage.id'
  | 'tags.projects.coverImage.mime'
  | 'tags.projects.coverImage.name'
  | 'tags.projects.coverImage.size'
  | 'tags.projects.coverImage.strapi_id'
  | 'tags.projects.coverImage.updatedAt'
  | 'tags.projects.coverImage.url'
  | 'tags.projects.coverImage.width'
  | 'tags.projects.createdAt'
  | 'tags.projects.description.medias'
  | 'tags.projects.id'
  | 'tags.projects.images'
  | 'tags.projects.images.alternativeText'
  | 'tags.projects.images.caption'
  | 'tags.projects.images.children'
  | 'tags.projects.images.createdAt'
  | 'tags.projects.images.ext'
  | 'tags.projects.images.hash'
  | 'tags.projects.images.height'
  | 'tags.projects.images.id'
  | 'tags.projects.images.mime'
  | 'tags.projects.images.name'
  | 'tags.projects.images.size'
  | 'tags.projects.images.strapi_id'
  | 'tags.projects.images.updatedAt'
  | 'tags.projects.images.url'
  | 'tags.projects.images.width'
  | 'tags.projects.internal.content'
  | 'tags.projects.internal.contentDigest'
  | 'tags.projects.internal.description'
  | 'tags.projects.internal.fieldOwners'
  | 'tags.projects.internal.ignoreType'
  | 'tags.projects.internal.mediaType'
  | 'tags.projects.internal.owner'
  | 'tags.projects.internal.type'
  | 'tags.projects.links'
  | 'tags.projects.links.children'
  | 'tags.projects.links.id'
  | 'tags.projects.links.label'
  | 'tags.projects.links.link'
  | 'tags.projects.links.strapi_id'
  | 'tags.projects.name'
  | 'tags.projects.organization.children'
  | 'tags.projects.organization.createdAt'
  | 'tags.projects.organization.id'
  | 'tags.projects.organization.link'
  | 'tags.projects.organization.name'
  | 'tags.projects.organization.projects'
  | 'tags.projects.organization.publishedAt'
  | 'tags.projects.organization.strapi_id'
  | 'tags.projects.organization.updatedAt'
  | 'tags.projects.parent.children'
  | 'tags.projects.parent.id'
  | 'tags.projects.publishedAt'
  | 'tags.projects.slug'
  | 'tags.projects.strapi_id'
  | 'tags.projects.tags'
  | 'tags.projects.tags.areas'
  | 'tags.projects.tags.children'
  | 'tags.projects.tags.createdAt'
  | 'tags.projects.tags.id'
  | 'tags.projects.tags.name'
  | 'tags.projects.tags.projects'
  | 'tags.projects.tags.publishedAt'
  | 'tags.projects.tags.strapi_id'
  | 'tags.projects.tags.updatedAt'
  | 'tags.projects.title'
  | 'tags.projects.updatedAt'
  | 'tags.publishedAt'
  | 'tags.strapi_id'
  | 'tags.updatedAt'
  | 'title'
  | 'updatedAt';

type STRAPI_PROJECTFilterInput = {
  readonly areas: InputMaybe<STRAPI_AREAFilterListInput>;
  readonly childStrapiProjectDescriptionTextnode: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenStrapiProjectDescriptionTextnode: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterListInput>;
  readonly coverImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_PROJECTDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly images: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly organization: InputMaybe<STRAPI_ORGANIZATIONFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly tags: InputMaybe<STRAPI_TAGFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_PROJECTFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PROJECTFilterInput>;
};

type STRAPI_PROJECTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROJECTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECTGroupConnection_distinctArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTGroupConnection_groupArgs = {
  field: STRAPI_PROJECTFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECTGroupConnection_maxArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTGroupConnection_minArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};


type STRAPI_PROJECTGroupConnection_sumArgs = {
  field: STRAPI_PROJECTFieldsEnum;
};

type STRAPI_PROJECTSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROJECTFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_PROJECT_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_TAG = Node & {
  readonly areas: Maybe<ReadonlyArray<Maybe<STRAPI_AREA>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TAG_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TAG_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TAG_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TAGConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TAGEdge>;
  readonly group: ReadonlyArray<STRAPI_TAGGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TAG>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TAGConnection_distinctArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGConnection_groupArgs = {
  field: STRAPI_TAGFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TAGConnection_maxArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGConnection_minArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGConnection_sumArgs = {
  field: STRAPI_TAGFieldsEnum;
};

type STRAPI_TAGEdge = {
  readonly next: Maybe<STRAPI_TAG>;
  readonly node: STRAPI_TAG;
  readonly previous: Maybe<STRAPI_TAG>;
};

type STRAPI_TAGFieldsEnum =
  | 'areas'
  | 'areas.children'
  | 'areas.children.children'
  | 'areas.children.children.children'
  | 'areas.children.children.id'
  | 'areas.children.id'
  | 'areas.children.internal.content'
  | 'areas.children.internal.contentDigest'
  | 'areas.children.internal.description'
  | 'areas.children.internal.fieldOwners'
  | 'areas.children.internal.ignoreType'
  | 'areas.children.internal.mediaType'
  | 'areas.children.internal.owner'
  | 'areas.children.internal.type'
  | 'areas.children.parent.children'
  | 'areas.children.parent.id'
  | 'areas.color'
  | 'areas.createdAt'
  | 'areas.description'
  | 'areas.id'
  | 'areas.internal.content'
  | 'areas.internal.contentDigest'
  | 'areas.internal.description'
  | 'areas.internal.fieldOwners'
  | 'areas.internal.ignoreType'
  | 'areas.internal.mediaType'
  | 'areas.internal.owner'
  | 'areas.internal.type'
  | 'areas.name'
  | 'areas.parent.children'
  | 'areas.parent.children.children'
  | 'areas.parent.children.id'
  | 'areas.parent.id'
  | 'areas.parent.internal.content'
  | 'areas.parent.internal.contentDigest'
  | 'areas.parent.internal.description'
  | 'areas.parent.internal.fieldOwners'
  | 'areas.parent.internal.ignoreType'
  | 'areas.parent.internal.mediaType'
  | 'areas.parent.internal.owner'
  | 'areas.parent.internal.type'
  | 'areas.parent.parent.children'
  | 'areas.parent.parent.id'
  | 'areas.projects'
  | 'areas.projects.areas'
  | 'areas.projects.areas.children'
  | 'areas.projects.areas.color'
  | 'areas.projects.areas.createdAt'
  | 'areas.projects.areas.description'
  | 'areas.projects.areas.id'
  | 'areas.projects.areas.name'
  | 'areas.projects.areas.projects'
  | 'areas.projects.areas.publishedAt'
  | 'areas.projects.areas.slug'
  | 'areas.projects.areas.strapi_id'
  | 'areas.projects.areas.tags'
  | 'areas.projects.areas.updatedAt'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'areas.projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'areas.projects.children.children'
  | 'areas.projects.children.id'
  | 'areas.projects.coverImage.alternativeText'
  | 'areas.projects.coverImage.caption'
  | 'areas.projects.coverImage.children'
  | 'areas.projects.coverImage.createdAt'
  | 'areas.projects.coverImage.ext'
  | 'areas.projects.coverImage.hash'
  | 'areas.projects.coverImage.height'
  | 'areas.projects.coverImage.id'
  | 'areas.projects.coverImage.mime'
  | 'areas.projects.coverImage.name'
  | 'areas.projects.coverImage.size'
  | 'areas.projects.coverImage.strapi_id'
  | 'areas.projects.coverImage.updatedAt'
  | 'areas.projects.coverImage.url'
  | 'areas.projects.coverImage.width'
  | 'areas.projects.createdAt'
  | 'areas.projects.description.medias'
  | 'areas.projects.id'
  | 'areas.projects.images'
  | 'areas.projects.images.alternativeText'
  | 'areas.projects.images.caption'
  | 'areas.projects.images.children'
  | 'areas.projects.images.createdAt'
  | 'areas.projects.images.ext'
  | 'areas.projects.images.hash'
  | 'areas.projects.images.height'
  | 'areas.projects.images.id'
  | 'areas.projects.images.mime'
  | 'areas.projects.images.name'
  | 'areas.projects.images.size'
  | 'areas.projects.images.strapi_id'
  | 'areas.projects.images.updatedAt'
  | 'areas.projects.images.url'
  | 'areas.projects.images.width'
  | 'areas.projects.internal.content'
  | 'areas.projects.internal.contentDigest'
  | 'areas.projects.internal.description'
  | 'areas.projects.internal.fieldOwners'
  | 'areas.projects.internal.ignoreType'
  | 'areas.projects.internal.mediaType'
  | 'areas.projects.internal.owner'
  | 'areas.projects.internal.type'
  | 'areas.projects.links'
  | 'areas.projects.links.children'
  | 'areas.projects.links.id'
  | 'areas.projects.links.label'
  | 'areas.projects.links.link'
  | 'areas.projects.links.strapi_id'
  | 'areas.projects.name'
  | 'areas.projects.organization.children'
  | 'areas.projects.organization.createdAt'
  | 'areas.projects.organization.id'
  | 'areas.projects.organization.link'
  | 'areas.projects.organization.name'
  | 'areas.projects.organization.projects'
  | 'areas.projects.organization.publishedAt'
  | 'areas.projects.organization.strapi_id'
  | 'areas.projects.organization.updatedAt'
  | 'areas.projects.parent.children'
  | 'areas.projects.parent.id'
  | 'areas.projects.publishedAt'
  | 'areas.projects.slug'
  | 'areas.projects.strapi_id'
  | 'areas.projects.tags'
  | 'areas.projects.tags.areas'
  | 'areas.projects.tags.children'
  | 'areas.projects.tags.createdAt'
  | 'areas.projects.tags.id'
  | 'areas.projects.tags.name'
  | 'areas.projects.tags.projects'
  | 'areas.projects.tags.publishedAt'
  | 'areas.projects.tags.strapi_id'
  | 'areas.projects.tags.updatedAt'
  | 'areas.projects.title'
  | 'areas.projects.updatedAt'
  | 'areas.publishedAt'
  | 'areas.slug'
  | 'areas.strapi_id'
  | 'areas.tags'
  | 'areas.tags.areas'
  | 'areas.tags.areas.children'
  | 'areas.tags.areas.color'
  | 'areas.tags.areas.createdAt'
  | 'areas.tags.areas.description'
  | 'areas.tags.areas.id'
  | 'areas.tags.areas.name'
  | 'areas.tags.areas.projects'
  | 'areas.tags.areas.publishedAt'
  | 'areas.tags.areas.slug'
  | 'areas.tags.areas.strapi_id'
  | 'areas.tags.areas.tags'
  | 'areas.tags.areas.updatedAt'
  | 'areas.tags.children'
  | 'areas.tags.children.children'
  | 'areas.tags.children.id'
  | 'areas.tags.createdAt'
  | 'areas.tags.id'
  | 'areas.tags.internal.content'
  | 'areas.tags.internal.contentDigest'
  | 'areas.tags.internal.description'
  | 'areas.tags.internal.fieldOwners'
  | 'areas.tags.internal.ignoreType'
  | 'areas.tags.internal.mediaType'
  | 'areas.tags.internal.owner'
  | 'areas.tags.internal.type'
  | 'areas.tags.name'
  | 'areas.tags.parent.children'
  | 'areas.tags.parent.id'
  | 'areas.tags.projects'
  | 'areas.tags.projects.areas'
  | 'areas.tags.projects.children'
  | 'areas.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'areas.tags.projects.createdAt'
  | 'areas.tags.projects.id'
  | 'areas.tags.projects.images'
  | 'areas.tags.projects.links'
  | 'areas.tags.projects.name'
  | 'areas.tags.projects.publishedAt'
  | 'areas.tags.projects.slug'
  | 'areas.tags.projects.strapi_id'
  | 'areas.tags.projects.tags'
  | 'areas.tags.projects.title'
  | 'areas.tags.projects.updatedAt'
  | 'areas.tags.publishedAt'
  | 'areas.tags.strapi_id'
  | 'areas.tags.updatedAt'
  | 'areas.updatedAt'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'projects'
  | 'projects.areas'
  | 'projects.areas.children'
  | 'projects.areas.children.children'
  | 'projects.areas.children.id'
  | 'projects.areas.color'
  | 'projects.areas.createdAt'
  | 'projects.areas.description'
  | 'projects.areas.id'
  | 'projects.areas.internal.content'
  | 'projects.areas.internal.contentDigest'
  | 'projects.areas.internal.description'
  | 'projects.areas.internal.fieldOwners'
  | 'projects.areas.internal.ignoreType'
  | 'projects.areas.internal.mediaType'
  | 'projects.areas.internal.owner'
  | 'projects.areas.internal.type'
  | 'projects.areas.name'
  | 'projects.areas.parent.children'
  | 'projects.areas.parent.id'
  | 'projects.areas.projects'
  | 'projects.areas.projects.areas'
  | 'projects.areas.projects.children'
  | 'projects.areas.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.areas.projects.createdAt'
  | 'projects.areas.projects.id'
  | 'projects.areas.projects.images'
  | 'projects.areas.projects.links'
  | 'projects.areas.projects.name'
  | 'projects.areas.projects.publishedAt'
  | 'projects.areas.projects.slug'
  | 'projects.areas.projects.strapi_id'
  | 'projects.areas.projects.tags'
  | 'projects.areas.projects.title'
  | 'projects.areas.projects.updatedAt'
  | 'projects.areas.publishedAt'
  | 'projects.areas.slug'
  | 'projects.areas.strapi_id'
  | 'projects.areas.tags'
  | 'projects.areas.tags.areas'
  | 'projects.areas.tags.children'
  | 'projects.areas.tags.createdAt'
  | 'projects.areas.tags.id'
  | 'projects.areas.tags.name'
  | 'projects.areas.tags.projects'
  | 'projects.areas.tags.publishedAt'
  | 'projects.areas.tags.strapi_id'
  | 'projects.areas.tags.updatedAt'
  | 'projects.areas.updatedAt'
  | 'projects.childStrapiProjectDescriptionTextnode.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childStrapiProjectDescriptionTextnode.description'
  | 'projects.childStrapiProjectDescriptionTextnode.id'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.children.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.id'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.content'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.contentDigest'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.description'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.fieldOwners'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.ignoreType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.mediaType'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.owner'
  | 'projects.childrenStrapiProjectDescriptionTextnode.internal.type'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.children'
  | 'projects.childrenStrapiProjectDescriptionTextnode.parent.id'
  | 'projects.children.children'
  | 'projects.children.children.children'
  | 'projects.children.children.id'
  | 'projects.children.id'
  | 'projects.children.internal.content'
  | 'projects.children.internal.contentDigest'
  | 'projects.children.internal.description'
  | 'projects.children.internal.fieldOwners'
  | 'projects.children.internal.ignoreType'
  | 'projects.children.internal.mediaType'
  | 'projects.children.internal.owner'
  | 'projects.children.internal.type'
  | 'projects.children.parent.children'
  | 'projects.children.parent.id'
  | 'projects.coverImage.alternativeText'
  | 'projects.coverImage.caption'
  | 'projects.coverImage.children'
  | 'projects.coverImage.children.children'
  | 'projects.coverImage.children.id'
  | 'projects.coverImage.createdAt'
  | 'projects.coverImage.ext'
  | 'projects.coverImage.hash'
  | 'projects.coverImage.height'
  | 'projects.coverImage.id'
  | 'projects.coverImage.internal.content'
  | 'projects.coverImage.internal.contentDigest'
  | 'projects.coverImage.internal.description'
  | 'projects.coverImage.internal.fieldOwners'
  | 'projects.coverImage.internal.ignoreType'
  | 'projects.coverImage.internal.mediaType'
  | 'projects.coverImage.internal.owner'
  | 'projects.coverImage.internal.type'
  | 'projects.coverImage.localFile.absolutePath'
  | 'projects.coverImage.localFile.accessTime'
  | 'projects.coverImage.localFile.atime'
  | 'projects.coverImage.localFile.atimeMs'
  | 'projects.coverImage.localFile.base'
  | 'projects.coverImage.localFile.birthTime'
  | 'projects.coverImage.localFile.birthtime'
  | 'projects.coverImage.localFile.birthtimeMs'
  | 'projects.coverImage.localFile.blksize'
  | 'projects.coverImage.localFile.blocks'
  | 'projects.coverImage.localFile.changeTime'
  | 'projects.coverImage.localFile.children'
  | 'projects.coverImage.localFile.childrenImageSharp'
  | 'projects.coverImage.localFile.ctime'
  | 'projects.coverImage.localFile.ctimeMs'
  | 'projects.coverImage.localFile.dev'
  | 'projects.coverImage.localFile.dir'
  | 'projects.coverImage.localFile.ext'
  | 'projects.coverImage.localFile.extension'
  | 'projects.coverImage.localFile.gid'
  | 'projects.coverImage.localFile.id'
  | 'projects.coverImage.localFile.ino'
  | 'projects.coverImage.localFile.mode'
  | 'projects.coverImage.localFile.modifiedTime'
  | 'projects.coverImage.localFile.mtime'
  | 'projects.coverImage.localFile.mtimeMs'
  | 'projects.coverImage.localFile.name'
  | 'projects.coverImage.localFile.nlink'
  | 'projects.coverImage.localFile.prettySize'
  | 'projects.coverImage.localFile.publicURL'
  | 'projects.coverImage.localFile.rdev'
  | 'projects.coverImage.localFile.relativeDirectory'
  | 'projects.coverImage.localFile.relativePath'
  | 'projects.coverImage.localFile.root'
  | 'projects.coverImage.localFile.size'
  | 'projects.coverImage.localFile.sourceInstanceName'
  | 'projects.coverImage.localFile.uid'
  | 'projects.coverImage.localFile.url'
  | 'projects.coverImage.mime'
  | 'projects.coverImage.name'
  | 'projects.coverImage.parent.children'
  | 'projects.coverImage.parent.id'
  | 'projects.coverImage.size'
  | 'projects.coverImage.strapi_id'
  | 'projects.coverImage.updatedAt'
  | 'projects.coverImage.url'
  | 'projects.coverImage.width'
  | 'projects.createdAt'
  | 'projects.description.data.children'
  | 'projects.description.data.description'
  | 'projects.description.data.id'
  | 'projects.description.medias'
  | 'projects.description.medias.alternativeText'
  | 'projects.description.medias.src'
  | 'projects.description.medias.url'
  | 'projects.id'
  | 'projects.images'
  | 'projects.images.alternativeText'
  | 'projects.images.caption'
  | 'projects.images.children'
  | 'projects.images.children.children'
  | 'projects.images.children.id'
  | 'projects.images.createdAt'
  | 'projects.images.ext'
  | 'projects.images.hash'
  | 'projects.images.height'
  | 'projects.images.id'
  | 'projects.images.internal.content'
  | 'projects.images.internal.contentDigest'
  | 'projects.images.internal.description'
  | 'projects.images.internal.fieldOwners'
  | 'projects.images.internal.ignoreType'
  | 'projects.images.internal.mediaType'
  | 'projects.images.internal.owner'
  | 'projects.images.internal.type'
  | 'projects.images.localFile.absolutePath'
  | 'projects.images.localFile.accessTime'
  | 'projects.images.localFile.atime'
  | 'projects.images.localFile.atimeMs'
  | 'projects.images.localFile.base'
  | 'projects.images.localFile.birthTime'
  | 'projects.images.localFile.birthtime'
  | 'projects.images.localFile.birthtimeMs'
  | 'projects.images.localFile.blksize'
  | 'projects.images.localFile.blocks'
  | 'projects.images.localFile.changeTime'
  | 'projects.images.localFile.children'
  | 'projects.images.localFile.childrenImageSharp'
  | 'projects.images.localFile.ctime'
  | 'projects.images.localFile.ctimeMs'
  | 'projects.images.localFile.dev'
  | 'projects.images.localFile.dir'
  | 'projects.images.localFile.ext'
  | 'projects.images.localFile.extension'
  | 'projects.images.localFile.gid'
  | 'projects.images.localFile.id'
  | 'projects.images.localFile.ino'
  | 'projects.images.localFile.mode'
  | 'projects.images.localFile.modifiedTime'
  | 'projects.images.localFile.mtime'
  | 'projects.images.localFile.mtimeMs'
  | 'projects.images.localFile.name'
  | 'projects.images.localFile.nlink'
  | 'projects.images.localFile.prettySize'
  | 'projects.images.localFile.publicURL'
  | 'projects.images.localFile.rdev'
  | 'projects.images.localFile.relativeDirectory'
  | 'projects.images.localFile.relativePath'
  | 'projects.images.localFile.root'
  | 'projects.images.localFile.size'
  | 'projects.images.localFile.sourceInstanceName'
  | 'projects.images.localFile.uid'
  | 'projects.images.localFile.url'
  | 'projects.images.mime'
  | 'projects.images.name'
  | 'projects.images.parent.children'
  | 'projects.images.parent.id'
  | 'projects.images.size'
  | 'projects.images.strapi_id'
  | 'projects.images.updatedAt'
  | 'projects.images.url'
  | 'projects.images.width'
  | 'projects.internal.content'
  | 'projects.internal.contentDigest'
  | 'projects.internal.description'
  | 'projects.internal.fieldOwners'
  | 'projects.internal.ignoreType'
  | 'projects.internal.mediaType'
  | 'projects.internal.owner'
  | 'projects.internal.type'
  | 'projects.links'
  | 'projects.links.children'
  | 'projects.links.children.children'
  | 'projects.links.children.id'
  | 'projects.links.id'
  | 'projects.links.internal.content'
  | 'projects.links.internal.contentDigest'
  | 'projects.links.internal.description'
  | 'projects.links.internal.fieldOwners'
  | 'projects.links.internal.ignoreType'
  | 'projects.links.internal.mediaType'
  | 'projects.links.internal.owner'
  | 'projects.links.internal.type'
  | 'projects.links.label'
  | 'projects.links.link'
  | 'projects.links.parent.children'
  | 'projects.links.parent.id'
  | 'projects.links.strapi_id'
  | 'projects.name'
  | 'projects.organization.children'
  | 'projects.organization.children.children'
  | 'projects.organization.children.id'
  | 'projects.organization.createdAt'
  | 'projects.organization.id'
  | 'projects.organization.internal.content'
  | 'projects.organization.internal.contentDigest'
  | 'projects.organization.internal.description'
  | 'projects.organization.internal.fieldOwners'
  | 'projects.organization.internal.ignoreType'
  | 'projects.organization.internal.mediaType'
  | 'projects.organization.internal.owner'
  | 'projects.organization.internal.type'
  | 'projects.organization.link'
  | 'projects.organization.name'
  | 'projects.organization.parent.children'
  | 'projects.organization.parent.id'
  | 'projects.organization.projects'
  | 'projects.organization.projects.areas'
  | 'projects.organization.projects.children'
  | 'projects.organization.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.organization.projects.createdAt'
  | 'projects.organization.projects.id'
  | 'projects.organization.projects.images'
  | 'projects.organization.projects.links'
  | 'projects.organization.projects.name'
  | 'projects.organization.projects.publishedAt'
  | 'projects.organization.projects.slug'
  | 'projects.organization.projects.strapi_id'
  | 'projects.organization.projects.tags'
  | 'projects.organization.projects.title'
  | 'projects.organization.projects.updatedAt'
  | 'projects.organization.publishedAt'
  | 'projects.organization.strapi_id'
  | 'projects.organization.updatedAt'
  | 'projects.parent.children'
  | 'projects.parent.children.children'
  | 'projects.parent.children.id'
  | 'projects.parent.id'
  | 'projects.parent.internal.content'
  | 'projects.parent.internal.contentDigest'
  | 'projects.parent.internal.description'
  | 'projects.parent.internal.fieldOwners'
  | 'projects.parent.internal.ignoreType'
  | 'projects.parent.internal.mediaType'
  | 'projects.parent.internal.owner'
  | 'projects.parent.internal.type'
  | 'projects.parent.parent.children'
  | 'projects.parent.parent.id'
  | 'projects.publishedAt'
  | 'projects.slug'
  | 'projects.strapi_id'
  | 'projects.tags'
  | 'projects.tags.areas'
  | 'projects.tags.areas.children'
  | 'projects.tags.areas.color'
  | 'projects.tags.areas.createdAt'
  | 'projects.tags.areas.description'
  | 'projects.tags.areas.id'
  | 'projects.tags.areas.name'
  | 'projects.tags.areas.projects'
  | 'projects.tags.areas.publishedAt'
  | 'projects.tags.areas.slug'
  | 'projects.tags.areas.strapi_id'
  | 'projects.tags.areas.tags'
  | 'projects.tags.areas.updatedAt'
  | 'projects.tags.children'
  | 'projects.tags.children.children'
  | 'projects.tags.children.id'
  | 'projects.tags.createdAt'
  | 'projects.tags.id'
  | 'projects.tags.internal.content'
  | 'projects.tags.internal.contentDigest'
  | 'projects.tags.internal.description'
  | 'projects.tags.internal.fieldOwners'
  | 'projects.tags.internal.ignoreType'
  | 'projects.tags.internal.mediaType'
  | 'projects.tags.internal.owner'
  | 'projects.tags.internal.type'
  | 'projects.tags.name'
  | 'projects.tags.parent.children'
  | 'projects.tags.parent.id'
  | 'projects.tags.projects'
  | 'projects.tags.projects.areas'
  | 'projects.tags.projects.children'
  | 'projects.tags.projects.childrenStrapiProjectDescriptionTextnode'
  | 'projects.tags.projects.createdAt'
  | 'projects.tags.projects.id'
  | 'projects.tags.projects.images'
  | 'projects.tags.projects.links'
  | 'projects.tags.projects.name'
  | 'projects.tags.projects.publishedAt'
  | 'projects.tags.projects.slug'
  | 'projects.tags.projects.strapi_id'
  | 'projects.tags.projects.tags'
  | 'projects.tags.projects.title'
  | 'projects.tags.projects.updatedAt'
  | 'projects.tags.publishedAt'
  | 'projects.tags.strapi_id'
  | 'projects.tags.updatedAt'
  | 'projects.title'
  | 'projects.updatedAt'
  | 'publishedAt'
  | 'strapi_id'
  | 'updatedAt';

type STRAPI_TAGFilterInput = {
  readonly areas: InputMaybe<STRAPI_AREAFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TAGFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TAGFilterInput>;
};

type STRAPI_TAGGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TAGEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TAGGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TAG>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TAGGroupConnection_distinctArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGGroupConnection_groupArgs = {
  field: STRAPI_TAGFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TAGGroupConnection_maxArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGGroupConnection_minArgs = {
  field: STRAPI_TAGFieldsEnum;
};


type STRAPI_TAGGroupConnection_sumArgs = {
  field: STRAPI_TAGFieldsEnum;
};

type STRAPI_TAGSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TAGFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__COMPONENT_SHARED_CONTACT = Node & {
  readonly button: Maybe<STRAPI__COMPONENT_SHARED_LINKS>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_SHARED_CONTACTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACTEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_CONTACTConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_CONTACTConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_CONTACTEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SHARED_CONTACT>;
  readonly node: STRAPI__COMPONENT_SHARED_CONTACT;
  readonly previous: Maybe<STRAPI__COMPONENT_SHARED_CONTACT>;
};

type STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum =
  | 'button.children'
  | 'button.children.children'
  | 'button.children.children.children'
  | 'button.children.children.id'
  | 'button.children.id'
  | 'button.children.internal.content'
  | 'button.children.internal.contentDigest'
  | 'button.children.internal.description'
  | 'button.children.internal.fieldOwners'
  | 'button.children.internal.ignoreType'
  | 'button.children.internal.mediaType'
  | 'button.children.internal.owner'
  | 'button.children.internal.type'
  | 'button.children.parent.children'
  | 'button.children.parent.id'
  | 'button.id'
  | 'button.internal.content'
  | 'button.internal.contentDigest'
  | 'button.internal.description'
  | 'button.internal.fieldOwners'
  | 'button.internal.ignoreType'
  | 'button.internal.mediaType'
  | 'button.internal.owner'
  | 'button.internal.type'
  | 'button.label'
  | 'button.link'
  | 'button.parent.children'
  | 'button.parent.children.children'
  | 'button.parent.children.id'
  | 'button.parent.id'
  | 'button.parent.internal.content'
  | 'button.parent.internal.contentDigest'
  | 'button.parent.internal.description'
  | 'button.parent.internal.fieldOwners'
  | 'button.parent.internal.ignoreType'
  | 'button.parent.internal.mediaType'
  | 'button.parent.internal.owner'
  | 'button.parent.internal.type'
  | 'button.parent.parent.children'
  | 'button.parent.parent.id'
  | 'button.strapi_id'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'strapi_id'
  | 'text';

type STRAPI__COMPONENT_SHARED_CONTACTFilterInput = {
  readonly button: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_CONTACT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_CONTACTGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_CONTACTSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SHARED_CONTACTFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__COMPONENT_SHARED_LINKS = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_SHARED_LINKSConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKSEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_LINKSConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_LINKSConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_LINKSEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SHARED_LINKS>;
  readonly node: STRAPI__COMPONENT_SHARED_LINKS;
  readonly previous: Maybe<STRAPI__COMPONENT_SHARED_LINKS>;
};

type STRAPI__COMPONENT_SHARED_LINKSFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'label'
  | 'link'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'strapi_id';

type STRAPI__COMPONENT_SHARED_LINKSFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_SHARED_LINKSFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFilterInput>;
};

type STRAPI__COMPONENT_SHARED_LINKSGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKSEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_LINKSGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_LINKSGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_LINKSGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_LINKSFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_LINKSSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SHARED_LINKSFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__COMPONENT_SHARED_PROFILE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly picture: Maybe<STRAPI__MEDIA>;
  readonly qualities: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_SHARED_TEXT_ITEM>>>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_SHARED_PROFILEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_PROFILEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_PROFILEConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_PROFILEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SHARED_PROFILE>;
  readonly node: STRAPI__COMPONENT_SHARED_PROFILE;
  readonly previous: Maybe<STRAPI__COMPONENT_SHARED_PROFILE>;
};

type STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'picture.alternativeText'
  | 'picture.caption'
  | 'picture.children'
  | 'picture.children.children'
  | 'picture.children.children.children'
  | 'picture.children.children.id'
  | 'picture.children.id'
  | 'picture.children.internal.content'
  | 'picture.children.internal.contentDigest'
  | 'picture.children.internal.description'
  | 'picture.children.internal.fieldOwners'
  | 'picture.children.internal.ignoreType'
  | 'picture.children.internal.mediaType'
  | 'picture.children.internal.owner'
  | 'picture.children.internal.type'
  | 'picture.children.parent.children'
  | 'picture.children.parent.id'
  | 'picture.createdAt'
  | 'picture.ext'
  | 'picture.formats.large.ext'
  | 'picture.formats.large.hash'
  | 'picture.formats.large.height'
  | 'picture.formats.large.mime'
  | 'picture.formats.large.name'
  | 'picture.formats.large.size'
  | 'picture.formats.large.url'
  | 'picture.formats.large.width'
  | 'picture.formats.medium.ext'
  | 'picture.formats.medium.hash'
  | 'picture.formats.medium.height'
  | 'picture.formats.medium.mime'
  | 'picture.formats.medium.name'
  | 'picture.formats.medium.size'
  | 'picture.formats.medium.url'
  | 'picture.formats.medium.width'
  | 'picture.formats.small.ext'
  | 'picture.formats.small.hash'
  | 'picture.formats.small.height'
  | 'picture.formats.small.mime'
  | 'picture.formats.small.name'
  | 'picture.formats.small.size'
  | 'picture.formats.small.url'
  | 'picture.formats.small.width'
  | 'picture.formats.thumbnail.ext'
  | 'picture.formats.thumbnail.hash'
  | 'picture.formats.thumbnail.height'
  | 'picture.formats.thumbnail.mime'
  | 'picture.formats.thumbnail.name'
  | 'picture.formats.thumbnail.size'
  | 'picture.formats.thumbnail.url'
  | 'picture.formats.thumbnail.width'
  | 'picture.hash'
  | 'picture.height'
  | 'picture.id'
  | 'picture.internal.content'
  | 'picture.internal.contentDigest'
  | 'picture.internal.description'
  | 'picture.internal.fieldOwners'
  | 'picture.internal.ignoreType'
  | 'picture.internal.mediaType'
  | 'picture.internal.owner'
  | 'picture.internal.type'
  | 'picture.localFile.absolutePath'
  | 'picture.localFile.accessTime'
  | 'picture.localFile.atime'
  | 'picture.localFile.atimeMs'
  | 'picture.localFile.base'
  | 'picture.localFile.birthTime'
  | 'picture.localFile.birthtime'
  | 'picture.localFile.birthtimeMs'
  | 'picture.localFile.blksize'
  | 'picture.localFile.blocks'
  | 'picture.localFile.changeTime'
  | 'picture.localFile.childImageSharp.children'
  | 'picture.localFile.childImageSharp.gatsbyImageData'
  | 'picture.localFile.childImageSharp.id'
  | 'picture.localFile.children'
  | 'picture.localFile.childrenImageSharp'
  | 'picture.localFile.childrenImageSharp.children'
  | 'picture.localFile.childrenImageSharp.gatsbyImageData'
  | 'picture.localFile.childrenImageSharp.id'
  | 'picture.localFile.children.children'
  | 'picture.localFile.children.id'
  | 'picture.localFile.ctime'
  | 'picture.localFile.ctimeMs'
  | 'picture.localFile.dev'
  | 'picture.localFile.dir'
  | 'picture.localFile.ext'
  | 'picture.localFile.extension'
  | 'picture.localFile.gid'
  | 'picture.localFile.id'
  | 'picture.localFile.ino'
  | 'picture.localFile.internal.content'
  | 'picture.localFile.internal.contentDigest'
  | 'picture.localFile.internal.description'
  | 'picture.localFile.internal.fieldOwners'
  | 'picture.localFile.internal.ignoreType'
  | 'picture.localFile.internal.mediaType'
  | 'picture.localFile.internal.owner'
  | 'picture.localFile.internal.type'
  | 'picture.localFile.mode'
  | 'picture.localFile.modifiedTime'
  | 'picture.localFile.mtime'
  | 'picture.localFile.mtimeMs'
  | 'picture.localFile.name'
  | 'picture.localFile.nlink'
  | 'picture.localFile.parent.children'
  | 'picture.localFile.parent.id'
  | 'picture.localFile.prettySize'
  | 'picture.localFile.publicURL'
  | 'picture.localFile.rdev'
  | 'picture.localFile.relativeDirectory'
  | 'picture.localFile.relativePath'
  | 'picture.localFile.root'
  | 'picture.localFile.size'
  | 'picture.localFile.sourceInstanceName'
  | 'picture.localFile.uid'
  | 'picture.localFile.url'
  | 'picture.mime'
  | 'picture.name'
  | 'picture.parent.children'
  | 'picture.parent.children.children'
  | 'picture.parent.children.id'
  | 'picture.parent.id'
  | 'picture.parent.internal.content'
  | 'picture.parent.internal.contentDigest'
  | 'picture.parent.internal.description'
  | 'picture.parent.internal.fieldOwners'
  | 'picture.parent.internal.ignoreType'
  | 'picture.parent.internal.mediaType'
  | 'picture.parent.internal.owner'
  | 'picture.parent.internal.type'
  | 'picture.parent.parent.children'
  | 'picture.parent.parent.id'
  | 'picture.size'
  | 'picture.strapi_id'
  | 'picture.updatedAt'
  | 'picture.url'
  | 'picture.width'
  | 'qualities'
  | 'qualities.children'
  | 'qualities.children.children'
  | 'qualities.children.children.children'
  | 'qualities.children.children.id'
  | 'qualities.children.id'
  | 'qualities.children.internal.content'
  | 'qualities.children.internal.contentDigest'
  | 'qualities.children.internal.description'
  | 'qualities.children.internal.fieldOwners'
  | 'qualities.children.internal.ignoreType'
  | 'qualities.children.internal.mediaType'
  | 'qualities.children.internal.owner'
  | 'qualities.children.internal.type'
  | 'qualities.children.parent.children'
  | 'qualities.children.parent.id'
  | 'qualities.id'
  | 'qualities.internal.content'
  | 'qualities.internal.contentDigest'
  | 'qualities.internal.description'
  | 'qualities.internal.fieldOwners'
  | 'qualities.internal.ignoreType'
  | 'qualities.internal.mediaType'
  | 'qualities.internal.owner'
  | 'qualities.internal.type'
  | 'qualities.parent.children'
  | 'qualities.parent.children.children'
  | 'qualities.parent.children.id'
  | 'qualities.parent.id'
  | 'qualities.parent.internal.content'
  | 'qualities.parent.internal.contentDigest'
  | 'qualities.parent.internal.description'
  | 'qualities.parent.internal.fieldOwners'
  | 'qualities.parent.internal.ignoreType'
  | 'qualities.parent.internal.mediaType'
  | 'qualities.parent.internal.owner'
  | 'qualities.parent.internal.type'
  | 'qualities.parent.parent.children'
  | 'qualities.parent.parent.id'
  | 'qualities.strapi_id'
  | 'qualities.text'
  | 'strapi_id';

type STRAPI__COMPONENT_SHARED_PROFILEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly picture: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly qualities: InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterListInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_PROFILE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_PROFILEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_PROFILESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SHARED_PROFILEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__COMPONENT_SHARED_SEO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly metaDescription: Maybe<Scalars['String']>;
  readonly metaTitle: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_SHARED_SEOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEOEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_SEOConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_SEOConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_SEOEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SHARED_SEO>;
  readonly node: STRAPI__COMPONENT_SHARED_SEO;
  readonly previous: Maybe<STRAPI__COMPONENT_SHARED_SEO>;
};

type STRAPI__COMPONENT_SHARED_SEOFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'metaDescription'
  | 'metaTitle'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'strapi_id';

type STRAPI__COMPONENT_SHARED_SEOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly metaDescription: InputMaybe<StringQueryOperatorInput>;
  readonly metaTitle: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_SHARED_SEOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_SEO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_SEOGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_SEOGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_SEOGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_SEOFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_SEOSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SHARED_SEOFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEM = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEMEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SHARED_TEXT_ITEM>;
  readonly node: STRAPI__COMPONENT_SHARED_TEXT_ITEM;
  readonly previous: Maybe<STRAPI__COMPONENT_SHARED_TEXT_ITEM>;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'strapi_id'
  | 'text';

type STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMFilterInput>;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SHARED_TEXT_ITEM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};


type STRAPI__COMPONENT_SHARED_TEXT_ITEMGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum;
};

type STRAPI__COMPONENT_SHARED_TEXT_ITEMSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SHARED_TEXT_ITEMFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__MEDIA = Node & {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldsEnum =
  | 'alternativeText'
  | 'caption'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'ext'
  | 'formats.large.ext'
  | 'formats.large.hash'
  | 'formats.large.height'
  | 'formats.large.mime'
  | 'formats.large.name'
  | 'formats.large.size'
  | 'formats.large.url'
  | 'formats.large.width'
  | 'formats.medium.ext'
  | 'formats.medium.hash'
  | 'formats.medium.height'
  | 'formats.medium.mime'
  | 'formats.medium.name'
  | 'formats.medium.size'
  | 'formats.medium.url'
  | 'formats.medium.width'
  | 'formats.small.ext'
  | 'formats.small.hash'
  | 'formats.small.height'
  | 'formats.small.mime'
  | 'formats.small.name'
  | 'formats.small.size'
  | 'formats.small.url'
  | 'formats.small.width'
  | 'formats.thumbnail.ext'
  | 'formats.thumbnail.hash'
  | 'formats.thumbnail.height'
  | 'formats.thumbnail.mime'
  | 'formats.thumbnail.name'
  | 'formats.thumbnail.size'
  | 'formats.thumbnail.url'
  | 'formats.thumbnail.width'
  | 'hash'
  | 'height'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'localFile.absolutePath'
  | 'localFile.accessTime'
  | 'localFile.atime'
  | 'localFile.atimeMs'
  | 'localFile.base'
  | 'localFile.birthTime'
  | 'localFile.birthtime'
  | 'localFile.birthtimeMs'
  | 'localFile.blksize'
  | 'localFile.blocks'
  | 'localFile.changeTime'
  | 'localFile.childImageSharp.children'
  | 'localFile.childImageSharp.children.children'
  | 'localFile.childImageSharp.children.id'
  | 'localFile.childImageSharp.fixed.aspectRatio'
  | 'localFile.childImageSharp.fixed.base64'
  | 'localFile.childImageSharp.fixed.height'
  | 'localFile.childImageSharp.fixed.originalName'
  | 'localFile.childImageSharp.fixed.src'
  | 'localFile.childImageSharp.fixed.srcSet'
  | 'localFile.childImageSharp.fixed.srcSetWebp'
  | 'localFile.childImageSharp.fixed.srcWebp'
  | 'localFile.childImageSharp.fixed.tracedSVG'
  | 'localFile.childImageSharp.fixed.width'
  | 'localFile.childImageSharp.fluid.aspectRatio'
  | 'localFile.childImageSharp.fluid.base64'
  | 'localFile.childImageSharp.fluid.originalImg'
  | 'localFile.childImageSharp.fluid.originalName'
  | 'localFile.childImageSharp.fluid.presentationHeight'
  | 'localFile.childImageSharp.fluid.presentationWidth'
  | 'localFile.childImageSharp.fluid.sizes'
  | 'localFile.childImageSharp.fluid.src'
  | 'localFile.childImageSharp.fluid.srcSet'
  | 'localFile.childImageSharp.fluid.srcSetWebp'
  | 'localFile.childImageSharp.fluid.srcWebp'
  | 'localFile.childImageSharp.fluid.tracedSVG'
  | 'localFile.childImageSharp.gatsbyImageData'
  | 'localFile.childImageSharp.id'
  | 'localFile.childImageSharp.internal.content'
  | 'localFile.childImageSharp.internal.contentDigest'
  | 'localFile.childImageSharp.internal.description'
  | 'localFile.childImageSharp.internal.fieldOwners'
  | 'localFile.childImageSharp.internal.ignoreType'
  | 'localFile.childImageSharp.internal.mediaType'
  | 'localFile.childImageSharp.internal.owner'
  | 'localFile.childImageSharp.internal.type'
  | 'localFile.childImageSharp.original.height'
  | 'localFile.childImageSharp.original.src'
  | 'localFile.childImageSharp.original.width'
  | 'localFile.childImageSharp.parent.children'
  | 'localFile.childImageSharp.parent.id'
  | 'localFile.childImageSharp.resize.aspectRatio'
  | 'localFile.childImageSharp.resize.height'
  | 'localFile.childImageSharp.resize.originalName'
  | 'localFile.childImageSharp.resize.src'
  | 'localFile.childImageSharp.resize.tracedSVG'
  | 'localFile.childImageSharp.resize.width'
  | 'localFile.children'
  | 'localFile.childrenImageSharp'
  | 'localFile.childrenImageSharp.children'
  | 'localFile.childrenImageSharp.children.children'
  | 'localFile.childrenImageSharp.children.id'
  | 'localFile.childrenImageSharp.fixed.aspectRatio'
  | 'localFile.childrenImageSharp.fixed.base64'
  | 'localFile.childrenImageSharp.fixed.height'
  | 'localFile.childrenImageSharp.fixed.originalName'
  | 'localFile.childrenImageSharp.fixed.src'
  | 'localFile.childrenImageSharp.fixed.srcSet'
  | 'localFile.childrenImageSharp.fixed.srcSetWebp'
  | 'localFile.childrenImageSharp.fixed.srcWebp'
  | 'localFile.childrenImageSharp.fixed.tracedSVG'
  | 'localFile.childrenImageSharp.fixed.width'
  | 'localFile.childrenImageSharp.fluid.aspectRatio'
  | 'localFile.childrenImageSharp.fluid.base64'
  | 'localFile.childrenImageSharp.fluid.originalImg'
  | 'localFile.childrenImageSharp.fluid.originalName'
  | 'localFile.childrenImageSharp.fluid.presentationHeight'
  | 'localFile.childrenImageSharp.fluid.presentationWidth'
  | 'localFile.childrenImageSharp.fluid.sizes'
  | 'localFile.childrenImageSharp.fluid.src'
  | 'localFile.childrenImageSharp.fluid.srcSet'
  | 'localFile.childrenImageSharp.fluid.srcSetWebp'
  | 'localFile.childrenImageSharp.fluid.srcWebp'
  | 'localFile.childrenImageSharp.fluid.tracedSVG'
  | 'localFile.childrenImageSharp.gatsbyImageData'
  | 'localFile.childrenImageSharp.id'
  | 'localFile.childrenImageSharp.internal.content'
  | 'localFile.childrenImageSharp.internal.contentDigest'
  | 'localFile.childrenImageSharp.internal.description'
  | 'localFile.childrenImageSharp.internal.fieldOwners'
  | 'localFile.childrenImageSharp.internal.ignoreType'
  | 'localFile.childrenImageSharp.internal.mediaType'
  | 'localFile.childrenImageSharp.internal.owner'
  | 'localFile.childrenImageSharp.internal.type'
  | 'localFile.childrenImageSharp.original.height'
  | 'localFile.childrenImageSharp.original.src'
  | 'localFile.childrenImageSharp.original.width'
  | 'localFile.childrenImageSharp.parent.children'
  | 'localFile.childrenImageSharp.parent.id'
  | 'localFile.childrenImageSharp.resize.aspectRatio'
  | 'localFile.childrenImageSharp.resize.height'
  | 'localFile.childrenImageSharp.resize.originalName'
  | 'localFile.childrenImageSharp.resize.src'
  | 'localFile.childrenImageSharp.resize.tracedSVG'
  | 'localFile.childrenImageSharp.resize.width'
  | 'localFile.children.children'
  | 'localFile.children.children.children'
  | 'localFile.children.children.id'
  | 'localFile.children.id'
  | 'localFile.children.internal.content'
  | 'localFile.children.internal.contentDigest'
  | 'localFile.children.internal.description'
  | 'localFile.children.internal.fieldOwners'
  | 'localFile.children.internal.ignoreType'
  | 'localFile.children.internal.mediaType'
  | 'localFile.children.internal.owner'
  | 'localFile.children.internal.type'
  | 'localFile.children.parent.children'
  | 'localFile.children.parent.id'
  | 'localFile.ctime'
  | 'localFile.ctimeMs'
  | 'localFile.dev'
  | 'localFile.dir'
  | 'localFile.ext'
  | 'localFile.extension'
  | 'localFile.gid'
  | 'localFile.id'
  | 'localFile.ino'
  | 'localFile.internal.content'
  | 'localFile.internal.contentDigest'
  | 'localFile.internal.description'
  | 'localFile.internal.fieldOwners'
  | 'localFile.internal.ignoreType'
  | 'localFile.internal.mediaType'
  | 'localFile.internal.owner'
  | 'localFile.internal.type'
  | 'localFile.mode'
  | 'localFile.modifiedTime'
  | 'localFile.mtime'
  | 'localFile.mtimeMs'
  | 'localFile.name'
  | 'localFile.nlink'
  | 'localFile.parent.children'
  | 'localFile.parent.children.children'
  | 'localFile.parent.children.id'
  | 'localFile.parent.id'
  | 'localFile.parent.internal.content'
  | 'localFile.parent.internal.contentDigest'
  | 'localFile.parent.internal.description'
  | 'localFile.parent.internal.fieldOwners'
  | 'localFile.parent.internal.ignoreType'
  | 'localFile.parent.internal.mediaType'
  | 'localFile.parent.internal.owner'
  | 'localFile.parent.internal.type'
  | 'localFile.parent.parent.children'
  | 'localFile.parent.parent.id'
  | 'localFile.prettySize'
  | 'localFile.publicURL'
  | 'localFile.rdev'
  | 'localFile.relativeDirectory'
  | 'localFile.relativePath'
  | 'localFile.root'
  | 'localFile.size'
  | 'localFile.sourceInstanceName'
  | 'localFile.uid'
  | 'localFile.url'
  | 'mime'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'size'
  | 'strapi_id'
  | 'updatedAt'
  | 'url'
  | 'width';

type STRAPI__MEDIAFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__MEDIAFilterInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};

type STRAPI__MEDIASortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIAFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.siteURL'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteURL: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteURL: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AreaBaseFragment = { readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null };

type AreaDetailFragment = { readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly images: ReadonlyArray<{ readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null } | null> | null, readonly tags: ReadonlyArray<{ readonly id: string, readonly name: string | null } | null> | null };

type ContactFragment = { readonly text: string | null, readonly button: { readonly id: string, readonly link: string | null, readonly label: string | null } | null };

type ExternalLinkFragment = { readonly id: string, readonly link: string | null, readonly label: string | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HomeDataQueryVariables = Exact<{ [key: string]: never; }>;


type HomeDataQuery = { readonly strapiHome: { readonly title: string | null, readonly introText: string | null, readonly profile: { readonly picture: { readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly qualities: ReadonlyArray<{ readonly text: string | null } | null> | null } | null, readonly contact: { readonly text: string | null, readonly button: { readonly id: string, readonly link: string | null, readonly label: string | null } | null } | null, readonly seo: { readonly metaTitle: string | null } | null, readonly areas: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly description: string | null } | null> | null } | null, readonly allStrapiArea: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly images: ReadonlyArray<{ readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null } | null> | null, readonly tags: ReadonlyArray<{ readonly id: string, readonly name: string | null } | null> | null } }> } };

type ImageBaseFragment = { readonly id: string, readonly alternativeText: string | null, readonly caption: string | null };

type NavDataQueryVariables = Exact<{ [key: string]: never; }>;


type NavDataQuery = { readonly site: { readonly siteMetadata: { readonly siteURL: string | null, readonly title: string | null } | null } | null };

type OrganizationFragment = { readonly id: string, readonly name: string | null, readonly link: string | null };

type ProfileFragment = { readonly picture: { readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly qualities: ReadonlyArray<{ readonly text: string | null } | null> | null };

type ProjectDetailFragment = { readonly id: string, readonly title: string | null, readonly name: string | null, readonly slug: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly organization: { readonly id: string, readonly name: string | null, readonly link: string | null } | null, readonly coverImage: { readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly images: ReadonlyArray<{ readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly tags: ReadonlyArray<{ readonly id: string, readonly name: string | null } | null> | null, readonly areas: ReadonlyArray<{ readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null } | null> | null, readonly links: ReadonlyArray<{ readonly id: string, readonly link: string | null, readonly label: string | null } | null> | null };

type ProjectsPageDataQueryVariables = Exact<{ [key: string]: never; }>;


type ProjectsPageDataQuery = { readonly allStrapiProject: { readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string | null, readonly name: string | null, readonly slug: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly organization: { readonly id: string, readonly name: string | null, readonly link: string | null } | null, readonly coverImage: { readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly images: ReadonlyArray<{ readonly id: string, readonly alternativeText: string | null, readonly caption: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly tags: ReadonlyArray<{ readonly id: string, readonly name: string | null } | null> | null, readonly areas: ReadonlyArray<{ readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null } | null> | null, readonly links: ReadonlyArray<{ readonly id: string, readonly link: string | null, readonly label: string | null } | null> | null } }> }, readonly allStrapiArea: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly slug: string | null, readonly name: string | null, readonly description: string | null, readonly color: string | null } }> } };


}
